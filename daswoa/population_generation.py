# -*- coding:utf-8 -*-

"""
作者：yuxinyong
日期：2022年11月07日
离散自适应搜索鲸鱼优化算法DASWOA
种群初始化
"""
import random
import math
import copy
import fitness_calculation
import numpy as np

class UAV:
    def __init__(self, num, position, uav_type, turn_radius, ammo_load, speed, airports):
        # 编号，位置，类型，转弯半径，弹药负载，速度，剩余弹药
        self.num = num
        self.position = position
        self.type = uav_type
        self.turn_radius = turn_radius
        self.ammo_load = ammo_load
        self.speed = speed
        self.remain_ammo = ammo_load
        self.airport = self.match_airport(airports)

    def ammo_consumption(self, num):
        self.remain_ammo -= num

    def match_airport(self, airports):
        for air in airports:
            if self.position == air.init_position:
                return air


class Target:
    def __init__(self, num, position, task, value):
        # 编号，位置，包含任务，价值
        self.num = num
        self.position = position
        self.task = task
        self.value = value


class Airport:
    def __init__(self, num, position, speed, direction, air_type=1):
        # 位置
        self.num = num
        self.init_position = position
        self.speed = speed
        self.direction = direction
        self.air_type = air_type
        # track是机场的轨迹，包含[位置，时间]
        self.track = self.init_track()

    def init_track(self):
        return [[self.init_position, 0]]

    def next_position_calculate(self, time):
        new_x = self.init_position[0] + self.speed*time*math.cos(self.direction)
        new_y = self.init_position[1] + self.speed*time*math.sin(self.direction)
        return [new_x, new_y]

    def airport_track_update(self, position):
        track = copy.deepcopy(self.track)
        track.append(position)
        self.track = sorted(track, key=(lambda x: x[1]))

    def airport_track_reset(self):
        self.track = [[self.init_position, 0]]


def resource_update(resource, num, ammo_num):
    resource[2][num-1] = resource[2][num-1] - ammo_num
    if resource[2][num-1] == 0:
        resource[1].remove(num)
    return resource


def resource_init(uavs):
    attack_uav = []
    detect_uav = []
    ammo_num = [0 for i in range(len(uavs))]
    for uav in uavs:
        if uav.type == 1 or uav.type == 2:
            detect_uav.append(uav.num)
        if uav.remain_ammo > 0:
            attack_uav.append(uav.num)
            ammo_num[uav.num-1] = uav.remain_ammo
    resource = [detect_uav, attack_uav, ammo_num]
    return resource


def detect_roulette(uavs, number_of_tasks):
    sum_task = sum(number_of_tasks)
    # 第一步、计算所有无人机被选择的概率
    Pst = []
    for i in range(len(uavs)):
        if uavs[i].type == 3:
            pst = 0
            Pst.append(pst)
        else:
            if sum_task == 0:
                pst = 1
                Pst.append(pst)
            else:
                pst = math.exp(0.1/((sum_task-number_of_tasks[i])/sum_task-0.9))
                Pst.append(pst)
    # 第二步、计算染色体概率，即将所有适应度归一化
    res_probability = []
    for ammo in Pst:
        probability = ammo / sum(Pst)
        res_probability.append(probability)
    # 第三步、计算累计概率
    cum_probability = [0]
    for i in range(len(res_probability)):
        cum = 0
        for j in range(i + 1):
            cum = cum + res_probability[j]
        cum_probability.append(cum)
    # print('累计概率', cum_probability)
    # 第四步、产生随机数，选择个体
    rand = random.random()
    # print('产生的随机数', rand)
    for p in range(len(cum_probability) - 1):
        if cum_probability[p] < rand <= cum_probability[p + 1]:
            rand_number = p+1
    return rand_number


def attact_roulette(resource, uavs, number_of_tasks):
    sum_task = sum(number_of_tasks)
    # 第一步、计算所有无人机被选择的概率
    Pst = []
    for i in range(len(resource[2])):
        if resource[2][i] == 0:
            pst = 0
            Pst.append(pst)
        else:
            if sum_task == 0:
                pst = math.exp(0.1/(resource[2][i]/uavs[i].ammo_load - 0.9))
                Pst.append(pst)
            else:
                pst = math.exp(0.1 / (resource[2][i] / uavs[i].ammo_load - 0.9)) * math.exp(
                    0.1 / ((sum_task-number_of_tasks[i])/sum_task - 0.91))
                Pst.append(pst)
    # 第二步、计算染色体概率，即将所有适应度归一化
    res_probability = []
    for ammo in Pst:
        probability = ammo / sum(Pst)
        res_probability.append(probability)
    # 第三步、计算累计概率
    cum_probability = [0]
    for i in range(len(res_probability)):
        cum = 0
        for j in range(i + 1):
            cum = cum + res_probability[j]
        cum_probability.append(cum)
    # print('累计概率', cum_probability)
    # 第四步、产生随机数，选择个体
    rand = random.random()
    # print('产生的随机数', rand)
    for p in range(len(cum_probability) - 1):
        if cum_probability[p] < rand <= cum_probability[p + 1]:
            rand_number = p+1
    return rand_number


# 根据剩余资源轮盘赌选择个体，主要体现在攻击任务上
def generate_one_solution(resource, targets, uavs):
    solution = []
    number_of_tasks = [0 for i in range(len(uavs))]
    for tar in targets:
        # print('目标的任务集合', tar.task)
        for task in tar.task:
            dna = [0 for _ in range(3)]
            dna[0] = tar.num
            if task == 1:
                # print('执行侦查任务', task)
                dna[1] = 1
                # print('侦查无人机集合', resource[0])
                detect_roulette(uavs, number_of_tasks)
                randNum = random.randint(0, len(resource[0]) - 1)
                # print('随机数是', randNum)
                dispatchNum = resource[0][randNum]
                # print('选择的侦查无人机是', dispatchNum)
                dna[2] = dispatchNum
            elif task == 2:
                dna[1] = 2
                # print('攻击无人机资源约束集', resource[1])
                # print('攻击前弹药集合', resource[2])
                dispatchNum = attact_roulette(resource, uavs, number_of_tasks)
                # print('选择的攻击无人机是', dispatchNum)
                resource = resource_update(resource, dispatchNum, 1)
                # print('攻击后弹药集合', resource[2])
                dna[2] = dispatchNum
            elif task == 3:
                # print('执行评估任务', task)
                dna[1] = 3
                # print('侦查无人机集合', resource[0])
                randNum = random.randint(0, len(resource[0]) - 1)
                # print('随机数是', randNum)
                dispatchNum = resource[0][randNum]
                # print('选择的侦查无人机是', dispatchNum)
                dna[2] = dispatchNum
            number_of_tasks[dispatchNum-1] += 1
            solution.append(dna)
    return solution, resource


def coding_population(targets, uavs, Obstacles, population_size):
    solutions = []  # 一个种群的解
    number = 0  # 当前已生成染色体的数量
    resources = []  # 一个种群所有解的资源约束集
    while number < population_size:
        number += 1
        resource = resource_init(uavs)  # 计算初始资源约束集
        # print('打印资源约束集：', resource)
        solution, resource = generate_one_solution(resource, targets, uavs)
        # 将解根据无人机编号顺序重新排列
        # print('解排序前：', chromosome)
        solution = sorted(solution, key=(lambda x: x[2]))
        # print('解排序后：', chromosome)
        solutions.append(solution)
        resources.append(resource)
    solutions = solution_adjustment(solutions, targets, uavs, Obstacles)
    # print('解的种群为：',chromosomes)
    print('编码结束')
    # print('资源约束集：',resources)
    return solutions, resources


def exchanging_two_columns(solution_fit, targets, uavs, Obstacles, threat_r):
    rand_num1 = random.randint(0, len(solution_fit[0]) - 1)
    rand_num2 = rand_num1
    while rand_num1 == rand_num2:
        rand_num2 = random.randint(0, len(solution_fit[0]) - 1)
    # print('交换前', rand_num1, rand_num2, solution_fit)
    store_column = copy.deepcopy(solution_fit[0][rand_num1])
    solution_fit[0][rand_num1] = copy.deepcopy(solution_fit[0][rand_num2])
    solution_fit[0][rand_num2] = copy.deepcopy(store_column)
    # print('store_column', store_column)
    solution_fit[0] = sorted(solution_fit[0], key=(lambda x: x[2]))
    # print('交换后', solution_fit)
    fitness, _, _, _, _ = fitness_calculation.fitness(solutions, targets, uavs, Obstacles, threat_r)
    solution_fit[1] = fitness[0]
    # print('适应度计算后', solution_fit)
    return solution_fit


def sorting_solution(solutions, targets, uavs, Obstacles, threat_r):
    fitness, _, _, _, _ = fitness_calculation.fitness(solutions, targets, uavs, Obstacles, threat_r)
    solution_fit_set = []
    for i in range(len(fitness)):
        solution_fit_set.append([copy.deepcopy(solutions[i]), copy.deepcopy(fitness[i])])
    solution_fit_set = sorted(solution_fit_set, key=(lambda x: x[1]))
    sorted_index = np.argsort(fitness)
    return solution_fit_set, sorted_index


def solution_adjustment(solutions, targets, uavs, Obstacles, kapa=0.8):
    solution_fit_set, _ = sorting_solution(solutions, targets, uavs, Obstacles)
    chi_star = kapa * ((solution_fit_set[-1][1] - solution_fit_set[0][1]) / (len(solution_fit_set) - 1))
    adjustment_failure_times = 0
    for i in range(len(solution_fit_set) - 2):
        chi_epsilon = (abs(solution_fit_set[i + 1][1] - solution_fit_set[i][1]) + abs(
            solution_fit_set[i + 1][1] - solution_fit_set[i + 2][1])) / 2
        iteration = 0
        while chi_epsilon > chi_star:
            if abs(solution_fit_set[i + 1][1] - solution_fit_set[i][1]) > chi_star / 2 >= abs(
                    solution_fit_set[i + 1][1] -
                    solution_fit_set[i + 2][1]):
                solution_fit_set[i] = exchanging_two_columns(solution_fit_set[i], targets, uavs, Obstacles)
            elif abs(solution_fit_set[i + 1][1] - solution_fit_set[i][1]) <= chi_star / 2 < abs(
                    solution_fit_set[i + 1][1] -
                    solution_fit_set[i + 2][1]):
                solution_fit_set[i + 2] = exchanging_two_columns(solution_fit_set[i + 2], targets, uavs, Obstacles)
            elif chi_star / 2 < abs(solution_fit_set[i + 1][1] - solution_fit_set[i][1]) and chi_star / 2 < abs(
                    solution_fit_set[i + 1][1] - solution_fit_set[i + 2][1]):
                solution_fit_set[i] = exchanging_two_columns(solution_fit_set[i], targets, uavs, Obstacles)
                solution_fit_set[i + 2] = exchanging_two_columns(solution_fit_set[i + 2], targets, uavs, Obstacles)
            chi_epsilon = (abs(solution_fit_set[i + 1][1] - solution_fit_set[i][1]) + abs(
                solution_fit_set[i + 1][1] - solution_fit_set[i + 2][1])) / 2
            iteration += 1
            if iteration > 150:
                adjustment_failure_times += 1
                break
    new_solutions = []
    for i in range(len(solution_fit_set)):
        new_solutions.append(solution_fit_set[i][0])
    print('调整种群一共失败了', adjustment_failure_times, '次')
    return new_solutions


def fixed_population_good1():
    fix_solutions = [[[1, 1, 1], [2, 3, 1], [5, 1, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [1, 2, 3], [4, 1, 3], [4, 2, 3], [2, 1, 4], [3, 1, 4], [3, 3, 4], [4, 3, 4], [1, 3, 5], [3, 2, 5]], [[2, 1, 1], [5, 3, 1], [2, 3, 1], [1, 3, 1], [1, 2, 2], [5, 2, 2], [3, 2, 3], [4, 1, 3], [4, 2, 3], [3, 3, 3], [1, 1, 3], [3, 1, 4], [5, 1, 4], [4, 3, 5], [2, 2, 5]], [[4, 3, 1], [2, 3, 1], [1, 2, 2], [4, 1, 3], [4, 2, 3], [3, 1, 3], [3, 2, 3], [3, 3, 3], [5, 1, 4], [1, 1, 4], [2, 1, 4], [1, 3, 4], [5, 3, 4], [2, 2, 5], [5, 2, 5]], [[3, 1, 1], [5, 1, 1], [3, 3, 1], [1, 1, 1], [5, 2, 2], [1, 2, 2], [2, 2, 3], [2, 3, 3], [3, 2, 3], [4, 1, 4], [2, 1, 4], [5, 3, 4], [4, 2, 5], [4, 3, 5], [1, 3, 5]], [[5, 1, 1], [5, 3, 1], [1, 3, 1], [5, 2, 2], [1, 2, 2], [4, 1, 3], [4, 2, 3], [2, 2, 3], [2, 3, 3], [2, 1, 5], [3, 1, 5], [3, 2, 5], [3, 3, 5], [1, 1, 5], [4, 3, 5]], [[3, 3, 1], [4, 3, 1], [2, 3, 1], [2, 2, 2], [5, 2, 2], [1, 2, 3], [3, 1, 3], [3, 2, 3], [5, 3, 3], [5, 1, 4], [2, 1, 4], [1, 1, 5], [1, 3, 5], [4, 1, 5], [4, 2, 5]], [[2, 1, 1], [1, 1, 1], [2, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [3, 1, 3], [5, 1, 3], [5, 3, 3], [4, 1, 4], [3, 2, 5], [4, 2, 5], [2, 3, 5], [3, 3, 5], [4, 3, 5]], [[5, 1, 1], [4, 1, 1], [1, 1, 1], [2, 2, 2], [5, 2, 3], [1, 3, 3], [5, 3, 3], [3, 1, 4], [4, 3, 4], [1, 2, 5], [4, 2, 5], [3, 2, 5], [3, 3, 5], [2, 1, 5], [2, 3, 5]], [[4, 1, 1], [3, 3, 1], [4, 3, 1], [2, 2, 2], [5, 2, 2], [3, 1, 3], [4, 2, 3], [2, 1, 3], [3, 2, 3], [1, 1, 4], [1, 3, 4], [5, 1, 4], [2, 3, 5], [1, 2, 5], [5, 3, 5]], [[4, 1, 1], [5, 2, 2], [1, 2, 2], [3, 2, 3], [3, 3, 3], [2, 3, 3], [1, 3, 3], [4, 3, 4], [5, 1, 4], [5, 3, 4], [3, 1, 4], [1, 1, 5], [4, 2, 5], [2, 1, 5], [2, 2, 5]], [[2, 1, 1], [2, 3, 1], [5, 2, 2], [1, 2, 2], [3, 2, 3], [1, 3, 3], [3, 3, 3], [4, 2, 3], [1, 1, 4], [4, 1, 4], [4, 3, 4], [3, 1, 5], [2, 2, 5], [5, 1, 5], [5, 3, 5]], [[2, 3, 1], [1, 3, 1], [4, 1, 1], [2, 2, 2], [5, 2, 2], [3, 2, 3], [5, 1, 3], [5, 3, 3], [1, 1, 4], [1, 2, 5], [2, 1, 5], [4, 2, 5], [4, 3, 5], [3, 1, 5], [3, 3, 5]], [[4, 3, 1], [5, 1, 1], [5, 2, 2], [1, 2, 2], [2, 1, 3], [2, 2, 3], [2, 3, 4], [3, 3, 4], [1, 3, 4], [3, 1, 5], [4, 1, 5], [4, 2, 5], [1, 1, 5], [3, 2, 5], [5, 3, 5]], [[2, 1, 1], [1, 1, 1], [3, 3, 1], [2, 2, 2], [5, 2, 2], [4, 2, 3], [1, 3, 3], [2, 3, 3], [3, 2, 3], [4, 3, 3], [3, 1, 4], [5, 3, 4], [4, 1, 5], [1, 2, 5], [5, 1, 5]], [[3, 1, 1], [2, 2, 2], [5, 2, 2], [4, 1, 3], [1, 2, 3], [2, 3, 3], [5, 1, 3], [1, 3, 3], [5, 3, 3], [4, 3, 4], [3, 3, 4], [1, 1, 5], [3, 2, 5], [2, 1, 5], [4, 2, 5]], [[1, 1, 1], [4, 3, 1], [3, 3, 1], [4, 2, 2], [5, 2, 2], [3, 1, 3], [2, 1, 3], [2, 2, 3], [1, 3, 3], [3, 2, 3], [5, 1, 5], [1, 2, 5], [4, 1, 5], [2, 3, 5], [5, 3, 5]], [[4, 1, 1], [3, 3, 1], [2, 3, 1], [2, 2, 2], [5, 2, 2], [2, 1, 3], [1, 1, 3], [4, 2, 3], [3, 2, 3], [1, 3, 4], [4, 3, 4], [3, 1, 4], [5, 1, 5], [1, 2, 5], [5, 3, 5]], [[3, 1, 1], [3, 3, 1], [1, 2, 2], [5, 2, 2], [1, 1, 3], [2, 2, 3], [5, 1, 3], [3, 2, 3], [2, 3, 3], [5, 3, 4], [4, 1, 4], [1, 3, 4], [2, 1, 5], [4, 2, 5], [4, 3, 5]], [[1, 3, 1], [4, 1, 1], [3, 1, 1], [5, 2, 2], [2, 2, 2], [1, 2, 3], [3, 3, 3], [5, 3, 3], [2, 1, 3], [5, 1, 4], [1, 1, 4], [3, 2, 5], [2, 3, 5], [4, 2, 5], [4, 3, 5]], [[3, 3, 1], [5, 2, 2], [1, 2, 2], [4, 1, 3], [1, 1, 3], [3, 2, 3], [2, 1, 4], [5, 1, 4], [3, 1, 4], [1, 3, 5], [2, 2, 5], [2, 3, 5], [4, 2, 5], [5, 3, 5], [4, 3, 5]], [[3, 1, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [1, 3, 3], [2, 1, 3], [3, 2, 3], [4, 2, 3], [3, 3, 4], [4, 1, 4], [5, 1, 4], [1, 1, 5], [1, 2, 5], [2, 3, 5], [4, 3, 5]], [[1, 3, 1], [2, 3, 1], [3, 3, 1], [4, 1, 1], [5, 1, 1], [5, 3, 1], [2, 2, 2], [1, 2, 3], [5, 2, 3], [2, 1, 4], [3, 1, 4], [4, 3, 4], [1, 1, 5], [3, 2, 5], [4, 2, 5]], [[1, 1, 1], [4, 1, 1], [2, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [3, 1, 3], [4, 2, 3], [5, 3, 3], [2, 1, 4], [2, 3, 4], [4, 3, 4], [3, 2, 5], [3, 3, 5], [5, 1, 5]], [[1, 3, 1], [2, 3, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [1, 1, 3], [1, 2, 3], [3, 2, 3], [4, 1, 3], [5, 1, 3], [3, 1, 4], [2, 1, 5], [3, 3, 5], [4, 2, 5], [4, 3, 5]], [[1, 3, 1], [2, 3, 1], [4, 1, 1], [4, 3, 1], [2, 2, 2], [5, 2, 2], [1, 2, 3], [3, 1, 3], [3, 3, 3], [4, 2, 3], [5, 1, 3], [5, 3, 3], [1, 1, 4], [2, 1, 4], [3, 2, 5]], [[3, 3, 1], [4, 3, 1], [2, 2, 2], [5, 2, 2], [3, 2, 3], [5, 1, 3], [2, 1, 4], [5, 3, 4], [1, 1, 5], [1, 2, 5], [1, 3, 5], [2, 3, 5], [3, 1, 5], [4, 1, 5], [4, 2, 5]], [[2, 3, 1], [4, 1, 1], [5, 3, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [2, 1, 3], [4, 2, 3], [4, 3, 3], [1, 1, 4], [3, 3, 4], [2, 2, 5], [3, 1, 5], [5, 1, 5]], [[5, 3, 1], [4, 1, 1], [4, 3, 1], [2, 2, 2], [5, 2, 2], [2, 1, 3], [3, 2, 3], [1, 3, 3], [3, 1, 4], [2, 3, 4], [5, 1, 4], [4, 2, 5], [1, 1, 5], [1, 2, 5], [3, 3, 5]], [[2, 3, 1], [2, 2, 2], [5, 2, 2], [1, 1, 3], [3, 1, 3], [3, 3, 3], [4, 1, 3], [4, 2, 3], [5, 3, 3], [2, 1, 4], [5, 1, 4], [1, 2, 5], [1, 3, 5], [3, 2, 5], [4, 3, 5]], [[4, 3, 1], [5, 1, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [1, 1, 3], [3, 1, 3], [2, 1, 3], [1, 3, 4], [3, 2, 5], [2, 3, 5], [1, 2, 5], [4, 1, 5], [3, 3, 5], [4, 2, 5]], [[1, 2, 2], [5, 2, 2], [3, 1, 3], [3, 2, 3], [3, 3, 3], [4, 1, 3], [4, 3, 3], [2, 2, 3], [5, 3, 4], [1, 3, 4], [2, 1, 4], [2, 3, 4], [1, 1, 5], [5, 1, 5], [4, 2, 5]], [[3, 1, 1], [1, 3, 1], [4, 3, 1], [5, 2, 2], [4, 2, 2], [3, 3, 3], [4, 1, 3], [2, 2, 3], [1, 1, 4], [2, 1, 4], [5, 1, 4], [3, 2, 5], [5, 3, 5], [1, 2, 5], [2, 3, 5]], [[5, 3, 1], [1, 1, 1], [3, 3, 1], [2, 1, 1], [4, 3, 1], [1, 2, 2], [5, 2, 3], [2, 2, 3], [3, 1, 4], [5, 1, 4], [3, 2, 5], [1, 3, 5], [4, 1, 5], [4, 2, 5], [2, 3, 5]], [[1, 1, 1], [1, 2, 2], [3, 2, 2], [4, 2, 2], [3, 1, 3], [2, 2, 3], [5, 3, 3], [1, 3, 4], [4, 1, 4], [3, 3, 5], [2, 1, 5], [2, 3, 5], [5, 1, 5], [5, 2, 5], [4, 3, 5]], [[1, 1, 1], [1, 2, 2], [2, 2, 3], [5, 2, 3], [4, 1, 4], [3, 3, 4], [1, 3, 4], [4, 3, 4], [5, 3, 4], [4, 2, 5], [2, 1, 5], [3, 1, 5], [5, 1, 5], [3, 2, 5], [2, 3, 5]], [[3, 1, 1], [4, 1, 1], [2, 3, 1], [5, 2, 2], [2, 2, 2], [4, 2, 3], [1, 2, 3], [1, 3, 3], [5, 1, 3], [3, 2, 5], [2, 1, 5], [1, 1, 5], [4, 3, 5], [3, 3, 5], [5, 3, 5]], [[3, 1, 1], [5, 2, 2], [1, 2, 2], [5, 1, 3], [2, 2, 3], [1, 3, 4], [3, 3, 4], [2, 3, 4], [2, 1, 5], [5, 3, 5], [3, 2, 5], [4, 1, 5], [4, 2, 5], [4, 3, 5], [1, 1, 5]], [[2, 1, 1], [5, 3, 1], [4, 3, 1], [3, 3, 1], [2, 2, 2], [5, 2, 2], [2, 3, 3], [4, 1, 3], [1, 1, 3], [3, 2, 3], [1, 3, 4], [1, 2, 5], [3, 1, 5], [5, 1, 5], [4, 2, 5]], [[3, 1, 1], [4, 1, 1], [5, 2, 2], [2, 2, 2], [3, 2, 3], [1, 2, 3], [2, 1, 3], [2, 3, 3], [1, 3, 3], [5, 1, 4], [4, 2, 5], [3, 3, 5], [4, 3, 5], [1, 1, 5], [5, 3, 5]], [[1, 1, 1], [3, 1, 1], [4, 3, 1], [2, 1, 1], [1, 2, 2], [5, 2, 2], [4, 1, 3], [3, 2, 3], [5, 1, 3], [3, 3, 3], [4, 2, 3], [1, 3, 3], [5, 3, 4], [2, 2, 5], [2, 3, 5]], [[4, 1, 1], [4, 3, 1], [5, 3, 1], [1, 2, 2], [2, 2, 3], [5, 2, 3], [2, 1, 4], [3, 1, 4], [1, 3, 4], [3, 2, 5], [4, 2, 5], [2, 3, 5], [5, 1, 5], [3, 3, 5], [1, 1, 5]], [[2, 1, 1], [1, 3, 1], [5, 3, 1], [1, 2, 2], [5, 2, 2], [3, 2, 3], [3, 1, 4], [1, 1, 4], [4, 3, 4], [2, 2, 5], [4, 1, 5], [2, 3, 5], [4, 2, 5], [5, 1, 5], [3, 3, 5]], [[4, 1, 1], [2, 3, 1], [5, 2, 2], [1, 2, 2], [1, 1, 3], [3, 1, 3], [3, 2, 3], [4, 3, 4], [5, 3, 4], [2, 1, 5], [3, 3, 5], [4, 2, 5], [5, 1, 5], [1, 3, 5], [2, 2, 5]], [[1, 1, 1], [3, 1, 1], [4, 1, 1], [5, 3, 1], [2, 3, 1], [1, 2, 2], [5, 2, 2], [5, 1, 3], [3, 2, 3], [4, 2, 3], [2, 1, 3], [1, 3, 4], [4, 3, 5], [2, 2, 5], [3, 3, 5]], [[1, 1, 1], [4, 1, 1], [4, 3, 1], [1, 2, 2], [2, 2, 3], [5, 2, 3], [5, 3, 3], [2, 1, 4], [4, 2, 5], [5, 1, 5], [2, 3, 5], [3, 1, 5], [3, 2, 5], [1, 3, 5], [3, 3, 5]], [[5, 1, 1], [3, 1, 1], [5, 2, 2], [1, 2, 2], [3, 2, 3], [4, 2, 3], [2, 1, 3], [2, 3, 3], [1, 1, 4], [1, 3, 4], [4, 1, 5], [5, 3, 5], [2, 2, 5], [4, 3, 5], [3, 3, 5]], [[2, 1, 1], [1, 3, 1], [2, 2, 2], [1, 1, 3], [3, 2, 3], [4, 2, 3], [2, 3, 3], [5, 1, 3], [3, 1, 4], [4, 1, 4], [5, 3, 4], [4, 3, 4], [3, 3, 4], [5, 2, 5], [1, 2, 5]], [[3, 3, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [4, 1, 3], [1, 1, 3], [1, 3, 3], [3, 2, 3], [2, 1, 3], [5, 1, 3], [4, 3, 4], [1, 2, 5], [4, 2, 5], [3, 1, 5], [2, 3, 5]], [[1, 2, 2], [5, 2, 2], [2, 2, 3], [1, 3, 3], [3, 1, 3], [3, 2, 3], [4, 3, 3], [5, 1, 3], [5, 3, 4], [2, 3, 4], [1, 1, 5], [4, 1, 5], [2, 1, 5], [4, 2, 5], [3, 3, 5]], [[1, 1, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [1, 3, 3], [3, 2, 3], [4, 2, 3], [5, 1, 3], [2, 3, 4], [1, 2, 5], [2, 1, 5], [3, 1, 5], [3, 3, 5], [4, 1, 5], [4, 3, 5]]]
    fix_resources = [[[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3], [0, 3, 2, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]]]
    return fix_solutions, fix_resources


def fixed_population_good2():
    fix_solutions = [[[1, 1, 1], [3, 3, 1], [2, 3, 1], [2, 2, 2], [5, 2, 2], [2, 1, 3], [5, 1, 3], [4, 1, 3], [4, 2, 3], [4, 3, 3], [5, 3, 4], [1, 2, 5], [1, 3, 5], [3, 1, 5], [3, 2, 5]], [[4, 1, 1], [2, 1, 1], [2, 3, 1], [1, 2, 2], [5, 2, 2], [5, 1, 3], [1, 1, 3], [1, 3, 4], [5, 3, 4], [3, 3, 4], [4, 2, 5], [3, 1, 5], [4, 3, 5], [3, 2, 5], [2, 2, 5]], [[1, 3, 1], [3, 3, 1], [1, 2, 2], [5, 2, 2], [5, 1, 3], [2, 1, 3], [5, 3, 3], [4, 1, 4], [2, 2, 5], [3, 1, 5], [1, 1, 5], [4, 2, 5], [4, 3, 5], [3, 2, 5], [2, 3, 5]], [[5, 1, 1], [1, 3, 1], [2, 3, 1], [3, 1, 1], [5, 3, 1], [5, 2, 2], [1, 2, 2], [4, 3, 3], [2, 2, 3], [4, 1, 4], [1, 1, 4], [2, 1, 4], [4, 2, 5], [3, 2, 5], [3, 3, 5]], [[2, 3, 1], [1, 1, 1], [3, 1, 1], [5, 1, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [4, 3, 3], [3, 3, 3], [1, 2, 3], [2, 1, 4], [4, 1, 5], [4, 2, 5], [3, 2, 5], [1, 3, 5]], [[3, 1, 1], [1, 1, 1], [3, 3, 1], [5, 1, 1], [4, 3, 1], [3, 2, 2], [2, 2, 3], [5, 2, 3], [4, 1, 4], [1, 3, 4], [5, 3, 4], [2, 3, 4], [2, 1, 5], [1, 2, 5], [4, 2, 5]], [[5, 1, 1], [4, 1, 1], [1, 1, 1], [5, 3, 1], [2, 1, 1], [5, 2, 2], [1, 2, 2], [4, 2, 3], [2, 2, 3], [4, 3, 3], [2, 3, 3], [3, 1, 3], [3, 3, 4], [1, 3, 5], [3, 2, 5]], [[4, 1, 1], [1, 1, 1], [1, 3, 1], [3, 3, 1], [4, 2, 2], [2, 2, 2], [3, 2, 3], [5, 1, 3], [5, 2, 3], [5, 3, 3], [2, 1, 4], [3, 1, 4], [2, 3, 4], [1, 2, 5], [4, 3, 5]], [[4, 3, 1], [5, 3, 1], [2, 3, 1], [5, 2, 2], [2, 2, 2], [4, 1, 3], [1, 1, 3], [4, 2, 3], [3, 3, 4], [1, 3, 4], [5, 1, 4], [2, 1, 5], [3, 1, 5], [1, 2, 5], [3, 2, 5]], [[4, 1, 1], [3, 3, 1], [5, 2, 2], [1, 2, 2], [2, 2, 3], [4, 2, 3], [1, 1, 3], [1, 3, 3], [2, 3, 3], [4, 3, 3], [5, 1, 4], [5, 3, 4], [3, 1, 4], [2, 1, 5], [3, 2, 5]], [[2, 2, 2], [5, 2, 2], [2, 1, 3], [3, 2, 3], [3, 3, 3], [1, 2, 3], [1, 3, 3], [2, 3, 4], [3, 1, 4], [5, 1, 4], [5, 3, 4], [4, 1, 5], [1, 1, 5], [4, 2, 5], [4, 3, 5]], [[2, 1, 1], [1, 1, 1], [4, 3, 1], [5, 3, 1], [5, 2, 2], [3, 2, 2], [2, 2, 3], [5, 1, 3], [1, 3, 4], [3, 3, 4], [2, 3, 4], [1, 2, 5], [3, 1, 5], [4, 1, 5], [4, 2, 5]], [[4, 1, 1], [2, 3, 1], [5, 2, 2], [2, 2, 2], [1, 2, 3], [1, 3, 3], [5, 1, 3], [3, 3, 3], [5, 3, 3], [3, 1, 4], [1, 1, 4], [3, 2, 5], [4, 2, 5], [4, 3, 5], [2, 1, 5]], [[1, 1, 1], [2, 3, 1], [1, 2, 2], [2, 2, 2], [4, 1, 3], [4, 2, 3], [4, 3, 3], [1, 3, 3], [5, 2, 3], [5, 3, 3], [3, 1, 5], [3, 2, 5], [2, 1, 5], [5, 1, 5], [3, 3, 5]], [[2, 1, 1], [2, 3, 1], [1, 2, 2], [5, 2, 3], [2, 2, 3], [3, 3, 4], [1, 3, 4], [5, 1, 5], [5, 3, 5], [4, 1, 5], [4, 2, 5], [1, 1, 5], [3, 1, 5], [3, 2, 5], [4, 3, 5]], [[5, 1, 1], [3, 1, 1], [5, 3, 1], [1, 3, 1], [5, 2, 2], [2, 2, 2], [3, 3, 3], [2, 1, 3], [4, 3, 3], [1, 2, 3], [2, 3, 4], [1, 1, 4], [3, 2, 5], [4, 1, 5], [4, 2, 5]], [[3, 1, 1], [2, 2, 2], [5, 2, 2], [2, 1, 3], [3, 2, 3], [1, 2, 3], [4, 1, 3], [4, 3, 3], [5, 1, 4], [2, 3, 4], [3, 3, 4], [1, 1, 4], [5, 3, 4], [4, 2, 5], [1, 3, 5]], [[5, 3, 1], [3, 3, 1], [2, 1, 1], [5, 2, 2], [3, 2, 2], [4, 2, 3], [1, 1, 3], [5, 1, 3], [1, 3, 3], [2, 2, 3], [4, 1, 4], [3, 1, 4], [4, 3, 4], [1, 2, 5], [2, 3, 5]], [[2, 1, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [3, 1, 3], [1, 2, 3], [3, 3, 3], [4, 2, 3], [4, 1, 4], [4, 3, 4], [5, 1, 5], [3, 2, 5], [1, 1, 5], [1, 3, 5], [2, 3, 5]], [[5, 3, 1], [4, 3, 1], [1, 2, 2], [5, 2, 2], [4, 1, 3], [4, 2, 3], [2, 1, 3], [3, 1, 4], [2, 3, 4], [3, 3, 4], [2, 2, 5], [1, 1, 5], [3, 2, 5], [5, 1, 5], [1, 3, 5]], [[3, 1, 1], [4, 1, 1], [5, 3, 1], [4, 2, 2], [1, 2, 2], [2, 2, 2], [1, 1, 3], [4, 3, 3], [2, 3, 4], [3, 2, 5], [5, 1, 5], [5, 2, 5], [2, 1, 5], [1, 3, 5], [3, 3, 5]], [[1, 1, 1], [5, 3, 1], [3, 3, 1], [1, 3, 1], [5, 2, 2], [2, 2, 2], [5, 1, 3], [3, 2, 3], [4, 1, 4], [2, 3, 4], [4, 2, 5], [3, 1, 5], [2, 1, 5], [1, 2, 5], [4, 3, 5]], [[3, 1, 1], [5, 1, 1], [1, 1, 1], [3, 3, 1], [2, 1, 1], [2, 3, 1], [1, 3, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [4, 3, 4], [5, 3, 4], [2, 2, 5], [4, 1, 5], [4, 2, 5]], [[2, 1, 1], [4, 1, 1], [5, 1, 1], [3, 1, 1], [2, 2, 2], [1, 2, 2], [4, 2, 2], [1, 3, 3], [3, 3, 3], [2, 3, 3], [4, 3, 3], [5, 3, 4], [1, 1, 5], [3, 2, 5], [5, 2, 5]], [[3, 3, 1], [4, 3, 1], [1, 1, 1], [2, 1, 1], [1, 2, 2], [5, 2, 2], [5, 1, 3], [3, 2, 3], [4, 1, 4], [1, 3, 4], [5, 3, 4], [4, 2, 5], [3, 1, 5], [2, 2, 5], [2, 3, 5]], [[2, 1, 1], [4, 3, 1], [5, 3, 1], [3, 2, 2], [5, 2, 2], [4, 1, 3], [3, 1, 3], [2, 2, 3], [2, 3, 3], [4, 2, 3], [3, 3, 4], [5, 1, 4], [1, 1, 4], [1, 2, 5], [1, 3, 5]], [[2, 1, 1], [5, 1, 1], [4, 1, 1], [3, 1, 1], [5, 2, 2], [1, 2, 2], [2, 2, 3], [3, 2, 3], [5, 3, 3], [1, 1, 4], [1, 3, 5], [2, 3, 5], [3, 3, 5], [4, 2, 5], [4, 3, 5]], [[3, 1, 1], [4, 1, 1], [2, 2, 2], [5, 2, 2], [1, 2, 3], [2, 3, 3], [4, 3, 3], [5, 3, 3], [2, 1, 4], [3, 3, 4], [1, 1, 5], [1, 3, 5], [3, 2, 5], [4, 2, 5], [5, 1, 5]], [[2, 3, 1], [3, 1, 1], [4, 3, 1], [5, 1, 1], [1, 2, 2], [5, 2, 2], [2, 2, 3], [4, 1, 3], [5, 3, 3], [1, 1, 4], [2, 1, 4], [1, 3, 5], [3, 2, 5], [3, 3, 5], [4, 2, 5]], [[1, 1, 1], [4, 1, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [4, 3, 3], [2, 1, 4], [2, 3, 4], [3, 1, 4], [3, 3, 4], [1, 3, 5], [2, 2, 5], [4, 2, 5], [5, 1, 5], [5, 3, 5]], [[5, 1, 1], [4, 3, 1], [3, 1, 1], [3, 3, 1], [2, 1, 1], [1, 3, 1], [1, 2, 2], [5, 2, 2], [1, 1, 3], [3, 2, 3], [4, 1, 4], [5, 3, 5], [4, 2, 5], [2, 2, 5], [2, 3, 5]], [[3, 1, 1], [5, 1, 1], [4, 3, 1], [1, 3, 1], [3, 3, 1], [2, 2, 2], [3, 2, 3], [2, 1, 3], [5, 3, 3], [4, 2, 3], [4, 1, 4], [1, 1, 4], [2, 3, 4], [5, 2, 5], [1, 2, 5]], [[4, 1, 1], [5, 1, 1], [5, 3, 1], [3, 3, 1], [2, 1, 1], [5, 2, 2], [2, 2, 2], [3, 2, 3], [2, 3, 3], [1, 3, 3], [1, 1, 5], [3, 1, 5], [4, 2, 5], [1, 2, 5], [4, 3, 5]], [[2, 3, 1], [1, 3, 1], [2, 2, 2], [5, 1, 3], [2, 1, 3], [4, 1, 3], [3, 1, 3], [3, 2, 3], [4, 2, 3], [1, 1, 4], [5, 3, 4], [3, 3, 4], [4, 3, 4], [5, 2, 5], [1, 2, 5]], [[1, 1, 1], [4, 1, 1], [4, 3, 1], [2, 2, 2], [5, 2, 3], [2, 1, 3], [5, 3, 3], [3, 1, 4], [2, 3, 4], [1, 3, 4], [4, 2, 5], [1, 2, 5], [3, 2, 5], [3, 3, 5], [5, 1, 5]], [[5, 3, 1], [1, 2, 2], [3, 2, 3], [2, 1, 3], [2, 3, 3], [1, 1, 4], [1, 3, 4], [3, 1, 4], [2, 2, 5], [3, 3, 5], [5, 1, 5], [5, 2, 5], [4, 1, 5], [4, 2, 5], [4, 3, 5]], [[4, 1, 1], [3, 1, 1], [2, 2, 2], [5, 2, 2], [5, 1, 3], [5, 3, 3], [3, 2, 3], [4, 3, 3], [1, 1, 3], [1, 2, 3], [1, 3, 3], [2, 3, 4], [2, 1, 5], [4, 2, 5], [3, 3, 5]], [[5, 1, 1], [2, 1, 1], [5, 2, 2], [1, 2, 2], [3, 1, 3], [3, 2, 3], [4, 2, 3], [5, 3, 3], [1, 3, 3], [4, 3, 3], [4, 1, 5], [2, 2, 5], [1, 1, 5], [3, 3, 5], [2, 3, 5]], [[5, 1, 1], [2, 1, 1], [2, 2, 2], [5, 2, 2], [1, 1, 3], [4, 2, 3], [3, 1, 3], [3, 2, 3], [4, 3, 3], [1, 3, 4], [1, 2, 5], [4, 1, 5], [3, 3, 5], [2, 3, 5], [5, 3, 5]], [[2, 3, 1], [4, 1, 1], [2, 2, 2], [5, 2, 2], [1, 1, 3], [3, 2, 3], [3, 3, 3], [4, 2, 3], [1, 3, 4], [5, 3, 4], [3, 1, 5], [2, 1, 5], [1, 2, 5], [4, 3, 5], [5, 1, 5]], [[1, 3, 1], [2, 1, 1], [1, 2, 2], [5, 2, 2], [4, 2, 3], [3, 1, 3], [2, 2, 3], [5, 1, 3], [2, 3, 3], [3, 3, 4], [1, 1, 4], [5, 3, 4], [4, 3, 4], [4, 1, 5], [3, 2, 5]], [[4, 1, 1], [5, 2, 2], [2, 2, 2], [4, 2, 3], [1, 1, 3], [3, 2, 3], [1, 3, 3], [5, 3, 3], [4, 3, 3], [3, 3, 4], [5, 1, 4], [2, 1, 5], [1, 2, 5], [3, 1, 5], [2, 3, 5]], [[3, 1, 1], [2, 3, 1], [5, 3, 1], [5, 2, 2], [1, 2, 2], [3, 3, 3], [2, 2, 3], [4, 1, 3], [3, 2, 5], [2, 1, 5], [5, 1, 5], [4, 2, 5], [4, 3, 5], [1, 1, 5], [1, 3, 5]], [[3, 1, 1], [1, 3, 1], [3, 3, 1], [4, 1, 1], [4, 3, 1], [1, 2, 2], [5, 2, 2], [1, 1, 3], [3, 2, 3], [4, 2, 3], [2, 1, 3], [5, 3, 3], [2, 2, 5], [5, 1, 5], [2, 3, 5]], [[4, 1, 1], [1, 1, 1], [2, 1, 1], [2, 2, 2], [5, 1, 3], [3, 2, 3], [3, 3, 3], [4, 2, 3], [4, 3, 3], [2, 3, 3], [1, 3, 3], [3, 1, 4], [5, 2, 5], [1, 2, 5], [5, 3, 5]], [[3, 3, 1], [2, 1, 1], [1, 2, 2], [5, 2, 2], [4, 1, 3], [1, 1, 3], [4, 2, 3], [3, 2, 3], [5, 3, 3], [2, 3, 3], [1, 3, 4], [5, 1, 5], [4, 3, 5], [3, 1, 5], [2, 2, 5]], [[3, 3, 1], [1, 2, 2], [3, 2, 3], [4, 1, 3], [5, 1, 3], [4, 2, 3], [2, 1, 3], [1, 3, 3], [2, 3, 3], [3, 1, 4], [4, 3, 4], [1, 1, 4], [5, 2, 5], [2, 2, 5], [5, 3, 5]], [[5, 2, 2], [3, 2, 2], [3, 1, 3], [4, 1, 3], [4, 2, 3], [2, 1, 3], [1, 2, 3], [1, 3, 3], [4, 3, 3], [5, 3, 3], [3, 3, 3], [1, 1, 5], [5, 1, 5], [2, 2, 5], [2, 3, 5]], [[1, 3, 1], [2, 1, 1], [2, 3, 1], [5, 2, 2], [1, 2, 2], [3, 1, 3], [4, 2, 3], [2, 2, 3], [5, 3, 3], [3, 2, 5], [1, 1, 5], [3, 3, 5], [4, 1, 5], [4, 3, 5], [5, 1, 5]], [[1, 1, 1], [5, 1, 1], [4, 1, 1], [3, 1, 1], [2, 3, 1], [1, 2, 2], [5, 2, 2], [2, 2, 3], [4, 2, 3], [3, 3, 3], [5, 3, 3], [4, 3, 4], [1, 3, 5], [3, 2, 5], [2, 1, 5]]]
    fix_resources = [[[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 2, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 3, 2, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 2, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 3, 2, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]]]
    return fix_solutions, fix_resources


def fixed_population_bad1():
    fix_solutions = [[[4, 3, 1], [1, 2, 2], [3, 2, 2], [4, 2, 2], [5, 2, 2], [2, 2, 3], [4, 1, 3], [5, 1, 4], [5, 3, 4], [1, 1, 5], [1, 3, 5], [2, 1, 5], [2, 3, 5], [3, 1, 5], [3, 3, 5]], [[2, 1, 1], [3, 1, 1], [4, 2, 2], [2, 2, 3], [3, 2, 3], [1, 3, 4], [2, 3, 4], [3, 3, 4], [4, 3, 4], [5, 1, 4], [1, 1, 5], [1, 2, 5], [4, 1, 5], [5, 2, 5], [5, 3, 5]], [[2, 2, 2], [1, 2, 3], [1, 3, 3], [3, 2, 3], [4, 3, 3], [2, 1, 4], [3, 3, 4], [5, 1, 4], [5, 3, 4], [1, 1, 5], [2, 3, 5], [3, 1, 5], [4, 1, 5], [4, 2, 5], [5, 2, 5]], [[1, 3, 1], [2, 1, 1], [2, 3, 1], [3, 1, 1], [3, 3, 1], [5, 1, 1], [3, 2, 2], [5, 2, 2], [2, 2, 3], [4, 1, 3], [4, 2, 3], [5, 3, 4], [1, 1, 5], [1, 2, 5], [4, 3, 5]], [[4, 1, 1], [4, 3, 1], [5, 3, 1], [1, 2, 2], [3, 2, 2], [4, 2, 2], [5, 2, 2], [2, 1, 3], [3, 1, 3], [3, 3, 3], [1, 1, 4], [1, 3, 4], [2, 3, 4], [5, 1, 4], [2, 2, 5]], [[5, 1, 1], [5, 3, 1], [3, 2, 2], [4, 2, 2], [1, 2, 3], [2, 2, 3], [2, 3, 3], [1, 1, 4], [1, 3, 4], [2, 1, 4], [3, 1, 5], [3, 3, 5], [4, 1, 5], [4, 3, 5], [5, 2, 5]], [[4, 1, 1], [4, 2, 2], [2, 2, 3], [2, 3, 3], [3, 1, 3], [3, 2, 3], [3, 3, 3], [5, 1, 3], [2, 1, 4], [4, 3, 4], [1, 1, 5], [1, 2, 5], [1, 3, 5], [5, 2, 5], [5, 3, 5]], [[2, 1, 1], [2, 3, 1], [4, 3, 1], [2, 2, 2], [3, 2, 3], [4, 1, 3], [4, 2, 3], [5, 1, 3], [1, 1, 4], [1, 3, 4], [3, 3, 4], [1, 2, 5], [3, 1, 5], [5, 2, 5], [5, 3, 5]], [[3, 3, 1], [4, 3, 1], [2, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [2, 1, 3], [3, 1, 3], [5, 1, 3], [1, 1, 5], [2, 3, 5], [3, 2, 5], [4, 1, 5], [4, 2, 5], [5, 3, 5]], [[1, 1, 1], [2, 3, 1], [3, 3, 1], [4, 1, 1], [5, 1, 1], [5, 3, 1], [1, 2, 2], [2, 2, 2], [4, 2, 2], [1, 3, 3], [3, 1, 3], [4, 3, 4], [2, 1, 5], [3, 2, 5], [5, 2, 5]], [[1, 3, 1], [3, 1, 1], [2, 2, 2], [5, 2, 2], [1, 1, 3], [1, 2, 3], [2, 1, 3], [2, 3, 3], [3, 3, 3], [4, 2, 3], [4, 3, 3], [5, 3, 3], [4, 1, 4], [3, 2, 5], [5, 1, 5]], [[1, 3, 1], [3, 3, 1], [5, 1, 1], [1, 2, 2], [3, 2, 2], [5, 2, 2], [4, 2, 3], [5, 3, 3], [1, 1, 4], [2, 1, 4], [3, 1, 4], [4, 3, 4], [2, 2, 5], [2, 3, 5], [4, 1, 5]], [[1, 1, 1], [2, 3, 1], [3, 1, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [4, 2, 3], [4, 1, 4], [5, 1, 4], [5, 3, 4], [2, 1, 5], [2, 2, 5], [3, 3, 5], [4, 3, 5]], [[2, 1, 1], [3, 3, 1], [4, 1, 1], [5, 1, 1], [5, 3, 1], [5, 2, 2], [1, 3, 3], [4, 2, 3], [4, 3, 3], [1, 1, 4], [2, 3, 4], [1, 2, 5], [2, 2, 5], [3, 1, 5], [3, 2, 5]], [[3, 1, 1], [4, 1, 1], [1, 2, 2], [4, 2, 2], [5, 2, 2], [3, 2, 3], [5, 3, 3], [1, 3, 4], [2, 1, 4], [5, 1, 4], [1, 1, 5], [2, 2, 5], [2, 3, 5], [3, 3, 5], [4, 3, 5]], [[5, 1, 1], [3, 2, 2], [4, 2, 3], [5, 2, 3], [1, 1, 4], [1, 3, 4], [3, 1, 4], [3, 3, 4], [4, 3, 4], [5, 3, 4], [1, 2, 5], [2, 1, 5], [2, 2, 5], [2, 3, 5], [4, 1, 5]], [[1, 3, 1], [4, 1, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [2, 1, 3], [2, 3, 3], [3, 3, 3], [4, 2, 3], [4, 3, 3], [3, 1, 4], [5, 1, 4], [1, 1, 5], [2, 2, 5], [5, 3, 5]], [[1, 3, 1], [2, 1, 1], [3, 1, 1], [2, 2, 2], [4, 2, 2], [5, 2, 2], [1, 2, 3], [2, 3, 3], [3, 3, 3], [5, 1, 4], [1, 1, 5], [3, 2, 5], [4, 1, 5], [4, 3, 5], [5, 3, 5]], [[1, 1, 1], [2, 1, 1], [4, 3, 1], [3, 2, 2], [5, 2, 2], [2, 2, 3], [2, 3, 3], [3, 1, 3], [5, 3, 3], [4, 1, 4], [1, 2, 5], [1, 3, 5], [3, 3, 5], [4, 2, 5], [5, 1, 5]], [[2, 1, 1], [2, 3, 1], [4, 1, 1], [5, 1, 1], [1, 2, 2], [4, 2, 2], [5, 2, 2], [3, 1, 3], [3, 2, 3], [1, 1, 4], [3, 3, 4], [4, 3, 4], [1, 3, 5], [2, 2, 5], [5, 3, 5]], [[5, 1, 1], [1, 2, 2], [5, 2, 2], [1, 1, 3], [2, 2, 3], [4, 1, 3], [1, 3, 4], [4, 3, 4], [5, 3, 4], [2, 1, 5], [2, 3, 5], [3, 1, 5], [3, 2, 5], [3, 3, 5], [4, 2, 5]], [[4, 3, 1], [5, 3, 1], [5, 2, 2], [2, 1, 3], [4, 2, 3], [1, 1, 4], [1, 3, 4], [2, 3, 4], [1, 2, 5], [2, 2, 5], [3, 1, 5], [3, 2, 5], [3, 3, 5], [4, 1, 5], [5, 1, 5]], [[1, 1, 1], [2, 3, 1], [5, 3, 1], [3, 2, 2], [4, 2, 2], [5, 2, 2], [1, 2, 3], [2, 2, 3], [3, 1, 3], [5, 1, 4], [1, 3, 5], [2, 1, 5], [3, 3, 5], [4, 1, 5], [4, 3, 5]], [[2, 1, 1], [1, 3, 3], [2, 2, 3], [3, 1, 3], [3, 2, 3], [3, 3, 3], [4, 3, 3], [2, 3, 4], [4, 1, 4], [5, 1, 4], [1, 1, 5], [1, 2, 5], [4, 2, 5], [5, 2, 5], [5, 3, 5]], [[1, 1, 1], [1, 2, 2], [3, 2, 2], [2, 2, 3], [3, 3, 3], [5, 2, 3], [5, 3, 3], [2, 1, 4], [3, 1, 4], [5, 1, 4], [1, 3, 5], [2, 3, 5], [4, 1, 5], [4, 2, 5], [4, 3, 5]], [[3, 1, 1], [4, 1, 1], [5, 2, 2], [4, 2, 3], [3, 3, 4], [4, 3, 4], [1, 1, 5], [1, 2, 5], [1, 3, 5], [2, 1, 5], [2, 2, 5], [2, 3, 5], [3, 2, 5], [5, 1, 5], [5, 3, 5]], [[1, 3, 1], [3, 3, 1], [1, 2, 3], [2, 1, 3], [4, 2, 3], [1, 1, 4], [4, 1, 4], [2, 2, 5], [2, 3, 5], [3, 1, 5], [3, 2, 5], [4, 3, 5], [5, 1, 5], [5, 2, 5], [5, 3, 5]], [[5, 1, 1], [1, 2, 2], [3, 2, 2], [5, 2, 2], [2, 1, 3], [2, 2, 3], [3, 1, 3], [3, 3, 3], [4, 1, 3], [4, 2, 3], [1, 1, 4], [1, 3, 4], [4, 3, 4], [2, 3, 5], [5, 3, 5]], [[1, 3, 1], [3, 1, 1], [5, 3, 1], [2, 2, 2], [5, 2, 2], [1, 1, 3], [3, 2, 3], [4, 1, 3], [4, 2, 3], [2, 3, 4], [5, 1, 4], [1, 2, 5], [2, 1, 5], [3, 3, 5], [4, 3, 5]], [[2, 1, 1], [2, 3, 1], [5, 3, 1], [5, 2, 2], [3, 2, 3], [4, 2, 3], [1, 3, 4], [3, 3, 4], [4, 3, 4], [1, 1, 5], [1, 2, 5], [2, 2, 5], [3, 1, 5], [4, 1, 5], [5, 1, 5]], [[2, 1, 1], [4, 1, 1], [5, 2, 2], [1, 1, 3], [1, 2, 3], [2, 3, 3], [4, 3, 3], [5, 1, 3], [1, 3, 4], [2, 2, 5], [3, 1, 5], [3, 2, 5], [3, 3, 5], [4, 2, 5], [5, 3, 5]], [[2, 1, 1], [3, 1, 1], [1, 2, 2], [3, 2, 2], [4, 1, 3], [4, 2, 3], [4, 3, 3], [5, 1, 3], [5, 2, 3], [1, 3, 4], [1, 1, 5], [2, 2, 5], [2, 3, 5], [3, 3, 5], [5, 3, 5]], [[2, 1, 1], [2, 3, 1], [3, 1, 1], [4, 3, 1], [4, 2, 2], [1, 2, 3], [1, 3, 3], [2, 2, 3], [5, 1, 3], [5, 3, 3], [4, 1, 4], [1, 1, 5], [3, 2, 5], [3, 3, 5], [5, 2, 5]], [[2, 3, 1], [3, 1, 1], [3, 3, 1], [4, 1, 1], [2, 2, 2], [5, 2, 2], [3, 2, 3], [4, 2, 3], [5, 1, 3], [5, 3, 3], [1, 1, 4], [2, 1, 4], [1, 2, 5], [1, 3, 5], [4, 3, 5]], [[2, 3, 1], [2, 2, 2], [4, 2, 2], [1, 2, 3], [1, 3, 3], [3, 2, 3], [3, 3, 3], [1, 1, 4], [3, 1, 4], [4, 1, 4], [4, 3, 4], [5, 1, 4], [5, 3, 4], [2, 1, 5], [5, 2, 5]], [[3, 1, 1], [4, 2, 2], [5, 2, 2], [1, 3, 3], [2, 1, 3], [4, 1, 3], [4, 3, 3], [3, 3, 4], [5, 1, 4], [5, 3, 4], [1, 1, 5], [1, 2, 5], [2, 2, 5], [2, 3, 5], [3, 2, 5]], [[4, 3, 1], [5, 3, 1], [3, 2, 2], [1, 1, 3], [1, 2, 3], [1, 3, 3], [2, 1, 3], [2, 2, 3], [3, 1, 3], [4, 1, 3], [5, 1, 3], [3, 3, 4], [2, 3, 5], [4, 2, 5], [5, 2, 5]], [[1, 1, 1], [2, 1, 1], [2, 3, 1], [1, 2, 2], [3, 2, 2], [2, 2, 3], [3, 1, 3], [3, 3, 3], [4, 1, 3], [4, 2, 3], [4, 3, 3], [5, 3, 3], [1, 3, 5], [5, 1, 5], [5, 2, 5]], [[2, 3, 1], [3, 1, 1], [4, 1, 1], [5, 3, 1], [3, 2, 2], [2, 1, 3], [4, 2, 3], [5, 2, 3], [1, 3, 4], [3, 3, 4], [4, 3, 4], [5, 1, 4], [1, 1, 5], [1, 2, 5], [2, 2, 5]], [[4, 3, 1], [1, 2, 2], [3, 2, 2], [4, 2, 2], [1, 1, 3], [2, 3, 3], [3, 3, 3], [5, 1, 3], [5, 2, 3], [4, 1, 4], [5, 3, 4], [1, 3, 5], [2, 1, 5], [2, 2, 5], [3, 1, 5]], [[1, 1, 1], [3, 3, 1], [4, 3, 1], [4, 2, 2], [1, 3, 3], [2, 2, 3], [3, 2, 3], [4, 1, 3], [5, 1, 3], [5, 3, 3], [3, 1, 4], [1, 2, 5], [2, 1, 5], [2, 3, 5], [5, 2, 5]], [[4, 3, 1], [5, 1, 1], [2, 2, 2], [3, 2, 2], [1, 2, 3], [2, 1, 3], [1, 1, 4], [1, 3, 4], [2, 3, 4], [5, 3, 4], [3, 1, 5], [3, 3, 5], [4, 1, 5], [4, 2, 5], [5, 2, 5]], [[4, 3, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [2, 2, 3], [2, 3, 3], [3, 1, 3], [2, 1, 4], [3, 3, 4], [4, 1, 4], [5, 1, 4], [5, 3, 4], [1, 1, 5], [1, 3, 5], [4, 2, 5]], [[1, 1, 1], [3, 1, 1], [2, 2, 2], [5, 2, 2], [3, 2, 3], [4, 1, 3], [4, 3, 3], [1, 3, 4], [5, 3, 4], [1, 2, 5], [2, 1, 5], [2, 3, 5], [3, 3, 5], [4, 2, 5], [5, 1, 5]], [[1, 3, 1], [3, 1, 1], [4, 1, 1], [4, 3, 1], [1, 2, 2], [3, 2, 2], [4, 2, 2], [5, 2, 2], [1, 1, 3], [2, 2, 3], [3, 3, 3], [5, 1, 3], [5, 3, 4], [2, 1, 5], [2, 3, 5]], [[1, 3, 1], [1, 1, 3], [1, 2, 3], [2, 2, 3], [3, 1, 3], [3, 3, 3], [4, 3, 3], [5, 3, 3], [2, 1, 4], [4, 1, 4], [2, 3, 5], [3, 2, 5], [4, 2, 5], [5, 1, 5], [5, 2, 5]], [[5, 2, 2], [2, 1, 3], [3, 2, 3], [4, 1, 3], [4, 2, 3], [1, 3, 4], [3, 3, 4], [4, 3, 4], [5, 1, 4], [1, 1, 5], [1, 2, 5], [2, 2, 5], [2, 3, 5], [3, 1, 5], [5, 3, 5]], [[1, 1, 1], [2, 1, 1], [2, 3, 1], [3, 3, 1], [4, 3, 1], [3, 2, 2], [4, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 4], [3, 1, 4], [4, 1, 4], [5, 3, 4], [2, 2, 5], [5, 1, 5]], [[1, 1, 1], [1, 2, 2], [5, 2, 2], [1, 3, 3], [2, 1, 3], [2, 2, 3], [3, 1, 3], [3, 3, 3], [5, 3, 3], [4, 1, 4], [4, 3, 4], [2, 3, 5], [3, 2, 5], [4, 2, 5], [5, 1, 5]], [[2, 1, 1], [5, 3, 1], [3, 2, 2], [1, 1, 3], [4, 2, 3], [5, 1, 3], [5, 2, 3], [1, 3, 4], [4, 3, 4], [1, 2, 5], [2, 2, 5], [2, 3, 5], [3, 1, 5], [3, 3, 5], [4, 1, 5]]]
    fix_resources = [[[1, 3, 4, 5], [2, 3, 5], [0, 1, 1, 0, 3]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 1, 2, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 2, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 2, 0, 0, 3]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 2, 0, 0, 3]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3], [0, 3, 2, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 1, 1, 0, 3]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]]]
    return fix_solutions, fix_resources


def fixed_population_bad2():
    fix_solutions = [[[1, 3, 1], [2, 3, 1], [3, 1, 1], [4, 3, 1], [5, 1, 1], [4, 2, 2], [5, 2, 2], [1, 2, 3], [4, 1, 3], [1, 1, 4], [5, 3, 4], [2, 1, 5], [2, 2, 5], [3, 2, 5], [3, 3, 5]], [[3, 1, 1], [1, 2, 2], [2, 2, 2], [3, 2, 2], [4, 2, 2], [4, 1, 3], [4, 3, 3], [5, 1, 3], [5, 2, 3], [1, 1, 4], [5, 3, 4], [1, 3, 5], [2, 1, 5], [2, 3, 5], [3, 3, 5]], [[2, 1, 1], [3, 3, 1], [5, 2, 2], [1, 1, 3], [1, 2, 3], [3, 2, 3], [4, 3, 3], [5, 3, 3], [1, 3, 4], [2, 3, 4], [3, 1, 4], [4, 1, 4], [2, 2, 5], [4, 2, 5], [5, 1, 5]], [[1, 2, 2], [1, 3, 3], [2, 2, 3], [3, 1, 3], [3, 2, 3], [4, 1, 3], [4, 3, 3], [1, 1, 4], [3, 3, 4], [5, 1, 4], [2, 1, 5], [2, 3, 5], [4, 2, 5], [5, 2, 5], [5, 3, 5]], [[2, 1, 1], [2, 3, 1], [3, 1, 1], [5, 1, 1], [3, 2, 2], [2, 2, 3], [4, 1, 3], [1, 1, 4], [3, 3, 4], [1, 2, 5], [1, 3, 5], [4, 2, 5], [4, 3, 5], [5, 2, 5], [5, 3, 5]], [[2, 1, 1], [4, 3, 1], [5, 1, 1], [3, 2, 2], [4, 2, 2], [5, 2, 2], [1, 1, 3], [1, 2, 3], [1, 3, 3], [3, 3, 3], [2, 3, 4], [2, 2, 5], [3, 1, 5], [4, 1, 5], [5, 3, 5]], [[4, 3, 1], [3, 2, 2], [1, 2, 3], [2, 2, 3], [5, 3, 3], [1, 3, 4], [2, 1, 4], [2, 3, 4], [3, 1, 4], [1, 1, 5], [3, 3, 5], [4, 1, 5], [4, 2, 5], [5, 1, 5], [5, 2, 5]], [[5, 1, 1], [5, 3, 1], [4, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [2, 1, 3], [2, 3, 3], [3, 2, 3], [4, 1, 3], [4, 3, 3], [3, 1, 4], [3, 3, 4], [1, 1, 5], [2, 2, 5]], [[3, 1, 1], [1, 2, 2], [4, 2, 2], [5, 2, 2], [1, 3, 3], [5, 3, 3], [2, 1, 4], [1, 1, 5], [2, 2, 5], [2, 3, 5], [3, 2, 5], [3, 3, 5], [4, 1, 5], [4, 3, 5], [5, 1, 5]], [[2, 1, 1], [1, 2, 2], [5, 2, 2], [1, 1, 3], [1, 3, 3], [3, 1, 3], [3, 2, 3], [3, 3, 3], [4, 2, 3], [5, 3, 3], [5, 1, 4], [2, 2, 5], [2, 3, 5], [4, 1, 5], [4, 3, 5]], [[1, 3, 1], [2, 3, 1], [5, 3, 1], [1, 2, 2], [3, 2, 2], [2, 2, 3], [4, 3, 3], [5, 2, 3], [2, 1, 4], [4, 1, 4], [1, 1, 5], [3, 1, 5], [3, 3, 5], [4, 2, 5], [5, 1, 5]], [[4, 3, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [2, 2, 3], [5, 3, 3], [1, 1, 4], [3, 3, 4], [2, 1, 5], [2, 3, 5], [3, 1, 5], [4, 1, 5], [4, 2, 5], [5, 1, 5]], [[1, 1, 1], [5, 1, 1], [5, 3, 1], [3, 2, 2], [4, 2, 2], [4, 3, 3], [5, 2, 3], [1, 3, 4], [2, 1, 4], [2, 3, 4], [3, 1, 4], [1, 2, 5], [2, 2, 5], [3, 3, 5], [4, 1, 5]], [[1, 1, 1], [2, 1, 1], [4, 1, 1], [1, 2, 2], [1, 3, 3], [2, 3, 3], [3, 2, 3], [3, 3, 3], [5, 3, 3], [3, 1, 4], [5, 1, 4], [2, 2, 5], [4, 2, 5], [4, 3, 5], [5, 2, 5]], [[1, 3, 1], [4, 3, 1], [2, 2, 2], [1, 1, 3], [1, 2, 3], [2, 3, 3], [3, 2, 3], [5, 3, 3], [3, 1, 4], [5, 1, 4], [2, 1, 5], [3, 3, 5], [4, 1, 5], [4, 2, 5], [5, 2, 5]], [[2, 3, 1], [5, 3, 1], [3, 2, 2], [1, 2, 3], [1, 3, 3], [3, 3, 3], [4, 1, 3], [5, 2, 3], [2, 1, 4], [3, 1, 4], [4, 3, 4], [5, 1, 4], [1, 1, 5], [2, 2, 5], [4, 2, 5]], [[1, 1, 1], [2, 1, 1], [3, 1, 1], [3, 3, 1], [1, 2, 3], [1, 3, 3], [5, 2, 3], [5, 3, 3], [4, 1, 4], [4, 3, 4], [5, 1, 4], [2, 2, 5], [2, 3, 5], [3, 2, 5], [4, 2, 5]], [[3, 3, 1], [5, 1, 1], [5, 3, 1], [5, 2, 2], [2, 1, 3], [2, 3, 3], [4, 2, 3], [4, 3, 3], [1, 1, 5], [1, 2, 5], [1, 3, 5], [2, 2, 5], [3, 1, 5], [3, 2, 5], [4, 1, 5]], [[4, 3, 1], [2, 2, 2], [1, 1, 3], [1, 2, 3], [5, 1, 3], [2, 1, 4], [2, 3, 4], [3, 3, 4], [4, 1, 4], [1, 3, 5], [3, 1, 5], [3, 2, 5], [4, 2, 5], [5, 2, 5], [5, 3, 5]], [[1, 1, 1], [2, 3, 1], [5, 1, 1], [2, 2, 2], [4, 2, 2], [3, 2, 3], [4, 1, 3], [4, 3, 3], [5, 2, 3], [2, 1, 4], [3, 1, 4], [1, 2, 5], [1, 3, 5], [3, 3, 5], [5, 3, 5]], [[1, 1, 1], [1, 3, 1], [2, 3, 1], [3, 3, 1], [5, 1, 1], [3, 1, 3], [3, 2, 3], [5, 2, 3], [4, 1, 4], [4, 3, 4], [5, 3, 4], [1, 2, 5], [2, 1, 5], [2, 2, 5], [4, 2, 5]], [[3, 1, 1], [1, 2, 2], [3, 2, 2], [4, 2, 2], [5, 2, 2], [2, 2, 3], [2, 3, 3], [3, 3, 3], [5, 1, 3], [5, 3, 3], [1, 1, 4], [1, 3, 4], [2, 1, 4], [4, 1, 4], [4, 3, 4]], [[1, 1, 1], [3, 1, 1], [3, 3, 1], [4, 1, 1], [5, 1, 1], [4, 2, 2], [1, 3, 3], [3, 2, 3], [5, 3, 3], [2, 1, 4], [4, 3, 4], [1, 2, 5], [2, 2, 5], [2, 3, 5], [5, 2, 5]], [[1, 1, 1], [2, 1, 1], [5, 3, 1], [5, 2, 2], [1, 2, 3], [2, 3, 3], [3, 2, 3], [1, 3, 4], [2, 2, 5], [3, 1, 5], [3, 3, 5], [4, 1, 5], [4, 2, 5], [4, 3, 5], [5, 1, 5]], [[1, 3, 1], [2, 3, 1], [3, 3, 1], [4, 1, 1], [2, 2, 2], [3, 2, 2], [5, 2, 3], [3, 1, 4], [4, 3, 4], [5, 3, 4], [1, 1, 5], [1, 2, 5], [2, 1, 5], [4, 2, 5], [5, 1, 5]], [[2, 1, 1], [5, 1, 1], [1, 2, 2], [1, 1, 3], [1, 3, 3], [3, 1, 3], [3, 2, 3], [3, 3, 3], [5, 2, 3], [2, 3, 4], [4, 1, 4], [4, 3, 4], [2, 2, 5], [4, 2, 5], [5, 3, 5]], [[4, 3, 1], [1, 2, 2], [4, 2, 2], [1, 1, 3], [1, 3, 3], [2, 1, 3], [2, 2, 3], [3, 2, 3], [4, 1, 3], [5, 3, 3], [2, 3, 4], [3, 1, 4], [3, 3, 4], [5, 1, 4], [5, 2, 5]], [[3, 3, 1], [4, 3, 1], [5, 1, 1], [1, 2, 2], [3, 2, 2], [4, 2, 3], [1, 1, 4], [2, 1, 4], [2, 3, 4], [3, 1, 4], [4, 1, 4], [5, 3, 4], [1, 3, 5], [2, 2, 5], [5, 2, 5]], [[4, 1, 1], [5, 3, 1], [3, 2, 2], [5, 2, 2], [1, 2, 3], [3, 1, 3], [5, 1, 3], [1, 3, 4], [2, 1, 4], [2, 3, 4], [4, 3, 4], [1, 1, 5], [2, 2, 5], [3, 3, 5], [4, 2, 5]], [[2, 1, 1], [3, 1, 1], [3, 3, 1], [4, 3, 1], [5, 1, 1], [1, 2, 2], [4, 2, 2], [5, 2, 2], [1, 1, 3], [2, 2, 3], [2, 3, 3], [3, 2, 3], [1, 3, 4], [5, 3, 4], [4, 1, 5]], [[1, 1, 1], [1, 3, 1], [2, 3, 1], [4, 3, 1], [5, 3, 1], [2, 1, 3], [3, 1, 3], [3, 2, 3], [3, 3, 3], [5, 2, 3], [5, 1, 4], [1, 2, 5], [2, 2, 5], [4, 1, 5], [4, 2, 5]], [[1, 1, 1], [4, 3, 1], [2, 2, 2], [1, 2, 3], [2, 1, 3], [2, 3, 3], [3, 1, 3], [3, 3, 4], [4, 1, 4], [5, 1, 4], [5, 3, 4], [1, 3, 5], [3, 2, 5], [4, 2, 5], [5, 2, 5]], [[1, 1, 1], [3, 1, 1], [4, 1, 1], [5, 3, 1], [2, 2, 2], [3, 2, 2], [1, 2, 3], [2, 1, 3], [4, 3, 3], [5, 1, 3], [1, 3, 4], [2, 3, 4], [3, 3, 5], [4, 2, 5], [5, 2, 5]], [[2, 3, 1], [3, 1, 1], [4, 2, 2], [5, 2, 2], [2, 1, 3], [3, 3, 3], [1, 3, 4], [4, 1, 4], [4, 3, 4], [1, 1, 5], [1, 2, 5], [2, 2, 5], [3, 2, 5], [5, 1, 5], [5, 3, 5]], [[2, 1, 1], [2, 3, 1], [5, 1, 1], [1, 2, 2], [2, 2, 2], [5, 2, 2], [1, 1, 3], [1, 3, 3], [3, 2, 3], [3, 3, 3], [4, 1, 3], [4, 3, 3], [5, 3, 3], [3, 1, 5], [4, 2, 5]], [[4, 3, 1], [1, 2, 2], [4, 2, 2], [2, 2, 3], [3, 1, 3], [5, 1, 3], [5, 3, 3], [1, 1, 4], [1, 3, 4], [3, 3, 4], [2, 1, 5], [2, 3, 5], [3, 2, 5], [4, 1, 5], [5, 2, 5]], [[1, 1, 1], [1, 3, 1], [2, 1, 1], [5, 3, 1], [2, 2, 2], [4, 2, 2], [1, 2, 3], [3, 2, 3], [3, 3, 3], [3, 1, 4], [2, 3, 5], [4, 1, 5], [4, 3, 5], [5, 1, 5], [5, 2, 5]], [[1, 1, 1], [2, 3, 1], [1, 2, 2], [3, 2, 2], [4, 2, 2], [3, 3, 3], [4, 3, 3], [5, 1, 3], [1, 3, 4], [2, 1, 4], [5, 3, 4], [2, 2, 5], [3, 1, 5], [4, 1, 5], [5, 2, 5]], [[3, 1, 1], [4, 3, 1], [2, 2, 2], [5, 2, 2], [1, 1, 4], [5, 1, 4], [1, 2, 5], [1, 3, 5], [2, 1, 5], [2, 3, 5], [3, 2, 5], [3, 3, 5], [4, 1, 5], [4, 2, 5], [5, 3, 5]], [[3, 3, 1], [5, 1, 1], [3, 2, 2], [4, 2, 2], [1, 1, 3], [1, 3, 3], [2, 1, 3], [2, 2, 3], [2, 3, 3], [5, 2, 3], [3, 1, 4], [4, 1, 4], [1, 2, 5], [4, 3, 5], [5, 3, 5]], [[2, 1, 1], [3, 3, 1], [4, 1, 1], [3, 2, 2], [4, 2, 2], [5, 2, 2], [1, 2, 3], [1, 3, 3], [2, 2, 3], [4, 3, 3], [1, 1, 4], [2, 3, 4], [5, 1, 4], [3, 1, 5], [5, 3, 5]], [[3, 3, 1], [5, 3, 1], [1, 2, 2], [3, 2, 2], [1, 3, 3], [2, 3, 3], [4, 1, 3], [4, 2, 3], [5, 1, 3], [4, 3, 4], [1, 1, 5], [2, 1, 5], [2, 2, 5], [3, 1, 5], [5, 2, 5]], [[5, 1, 1], [1, 2, 2], [2, 2, 2], [3, 2, 2], [3, 1, 3], [4, 1, 3], [4, 2, 3], [4, 3, 3], [5, 2, 3], [5, 3, 3], [1, 3, 4], [2, 1, 4], [1, 1, 5], [2, 3, 5], [3, 3, 5]], [[1, 1, 1], [3, 1, 1], [2, 2, 2], [4, 2, 2], [4, 1, 3], [5, 2, 3], [2, 3, 4], [3, 3, 4], [5, 3, 4], [1, 2, 5], [1, 3, 5], [2, 1, 5], [3, 2, 5], [4, 3, 5], [5, 1, 5]], [[1, 3, 1], [4, 3, 1], [5, 1, 1], [4, 2, 2], [1, 2, 3], [2, 1, 3], [2, 2, 3], [3, 1, 3], [1, 1, 4], [3, 3, 4], [2, 3, 5], [3, 2, 5], [4, 1, 5], [5, 2, 5], [5, 3, 5]], [[4, 1, 1], [5, 1, 1], [1, 2, 2], [2, 2, 3], [3, 1, 3], [3, 2, 3], [5, 3, 3], [2, 1, 4], [2, 3, 4], [1, 1, 5], [1, 3, 5], [3, 3, 5], [4, 2, 5], [4, 3, 5], [5, 2, 5]], [[1, 1, 3], [1, 2, 3], [2, 1, 3], [2, 3, 3], [3, 1, 3], [4, 3, 3], [5, 2, 3], [5, 3, 3], [1, 3, 5], [2, 2, 5], [3, 2, 5], [3, 3, 5], [4, 1, 5], [4, 2, 5], [5, 1, 5]], [[1, 1, 1], [1, 2, 2], [2, 1, 3], [2, 2, 3], [3, 3, 3], [4, 1, 3], [5, 3, 3], [1, 3, 4], [5, 1, 4], [2, 3, 5], [3, 1, 5], [3, 2, 5], [4, 2, 5], [4, 3, 5], [5, 2, 5]], [[3, 1, 1], [1, 2, 3], [2, 2, 3], [2, 3, 3], [4, 3, 3], [1, 1, 4], [1, 3, 4], [3, 3, 4], [5, 1, 4], [2, 1, 5], [3, 2, 5], [4, 1, 5], [4, 2, 5], [5, 2, 5], [5, 3, 5]], [[5, 1, 1], [3, 2, 2], [1, 1, 3], [2, 1, 3], [3, 1, 3], [3, 3, 3], [4, 1, 3], [4, 2, 3], [4, 3, 3], [5, 3, 3], [1, 3, 4], [2, 3, 4], [1, 2, 5], [2, 2, 5], [5, 2, 5]]]
    fix_resources = [[[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 1, 1, 0, 3]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 2, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 1, 1, 0, 3]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 2, 0, 0, 3]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 3, 2, 0, 0]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 1, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 3, 5], [0, 2, 2, 0, 1]], [[1, 3, 4, 5], [2, 3], [0, 3, 2, 0, 0]], [[1, 3, 4, 5], [2, 5], [0, 3, 0, 0, 2]], [[1, 3, 4, 5], [2, 5], [0, 2, 0, 0, 3]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 2, 0, 0, 3]], [[1, 3, 4, 5], [2, 3, 5], [0, 3, 1, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2, 5], [0, 4, 0, 0, 1]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]], [[1, 3, 4, 5], [2], [0, 5, 0, 0, 0]], [[1, 3, 4, 5], [2, 3], [0, 4, 1, 0, 0]]]
    return fix_solutions, fix_resources


if __name__ == '__main__':
    airport = [[[42000, 18000], 50, math.pi / 2], [[3000, 30000], 50, math.pi / 2], [[29000, 48000], 50, math.pi]]
    Uav = [[[42000, 18000], 1, 80, 0, 250], [[42000, 18000], 3, 60, 5, 220], [[3000, 30000], 2, 70, 2, 200],
           [[29000, 48000], 1, 80, 0, 250, 3], [[29000, 48000], 2, 70, 3, 200, 3]]
    targets = []
    uavs = []
    airports = []
    target = [[[25000, 36000], [1, 2, 3], 40], [[5000, 20000], [1, 2, 3], 60], [[47500, 30000], [1, 2, 3], 40],
              [[2500, 45000], [1, 2, 3], 80], [[20000, 15000], [1, 2, 3], 80]]
    Obstacles = []
    for i in range(len(airport)):
        c_air = Airport(i + 1, airport[i][0], airport[i][1], airport[i][2])
        airports.append(c_air)
    for i in range(len(target)):
        c_tar = Target(i + 1, target[i][0], target[i][1], target[i][2])
        targets.append(c_tar)
    for i in range(len(Uav)):
        c_uav = UAV(i + 1, Uav[i][0], Uav[i][1], Uav[i][2], Uav[i][3], Uav[i][4], airports)
        uavs.append(c_uav)
    population = 100
    solutions, resources = coding_population(targets, uavs, Obstacles, population)
    print('解的种群是', solutions)

