# -*- coding:utf-8 -*-

"""
作者：yuxinyong
日期：2022年10月06日
"""
import generate_animation
import chromosome_generation
import MAP
import math

# airport = [[[42000, 18000], 50, math.pi/2], [[3000, 30000], 50, math.pi/2], [[29000, 48000], 50, math.pi]]
# Uav = [[[42000, 18000], 1, 80, 0, 250], [[42000, 18000], 3, 60, 5, 220], [[3000, 30000], 2, 70, 2, 200],
#        [[29000, 48000], 1, 80, 0, 250, 3], [[29000, 48000], 2, 70, 3, 200, 3]]
# targets = []
# uavs = []
# airports = []
# # obstacles = []
# obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[45000, 25000], 1000]],
#              [1, [[30000, 15000], 2000]], [1, [[35000, 45000], 500]],
#              [2, [[30000, 25000], [35000, 27000], [38000, 31000], [33000, 35000], [26000, 30000]]],
#              [2, [[18000, 21000], [23000, 22000], [24000, 25000], [19000, 26000]]]]
# target = [[[25000, 36000], [1, 2, 3], 40], [[5000, 20000], [1, 2, 3], 60], [[47500, 30000], [1, 2, 3], 40],
#           [[2500, 45000], [1, 2, 3], 80], [[20000, 15000], [1, 2, 3], 80]]
# Obstacles = []
# for i in range(len(airport)):
#     c_air = chromosome_generation.Airport(i + 1, airport[i][0], airport[i][1], airport[i][2])
#     airports.append(c_air)
# for i in range(len(target)):
#     c_tar = chromosome_generation.Target(i + 1, target[i][0], target[i][1], target[i][2])
#     targets.append(c_tar)
# for i in range(len(Uav)):
#     c_uav = chromosome_generation.UAV(i + 1, Uav[i][0], Uav[i][1], Uav[i][2], Uav[i][3], Uav[i][4], airports)
#     uavs.append(c_uav)
# for obstacle in obstacles:
#     if obstacle[0] == 1:
#         Obs = MAP.Obstacle('o', obstacle[1])
#     else:
#         Obs = MAP.Obstacle('p', obstacle[1])
#     Obstacles.append(Obs)
# optimal_value = 500.60690796564813
# optimal_chromosome = [[1, 1, 1], [5, 1, 1], [5, 3, 1], [3, 1, 1], [3, 3, 1], [4, 2, 2], [3, 2, 2], [1, 2, 3], [1, 3, 3], [4, 3, 3], [4, 1, 4], [2, 3, 4], [5, 2, 5], [2, 1, 5], [2, 2, 5]]
# return_airport = [[1, [42000, 35254], 345.08856253546537, 1], [1, [42000, 42505], 490.09082692797404, 2], [2, [3000, 42792], 255.84004400599508, 3], [3, [12412, 48000], 331.7604324343035, 4], [3, [8904, 48000], 401.9212549470092, 5]]



airport = [[[42000, 18000], 50, math.pi/2], [[3000, 18000], 50, math.pi/2], [[45000, 50000], 50, math.pi],
           [[30000, 5000], 50, 3*math.pi/4]]
Uav = [[[42000, 18000], 1, 80, 0, 250], [[42000, 18000], 3, 60, 5, 220], [[3000, 18000], 3, 70, 5, 210],
       [[3000, 18000], 1, 80, 0, 240], [[45000, 50000], 2, 70, 3, 200, 3], [[45000, 50000], 3, 80, 4, 220],
       [[30000, 5000], 2, 70, 2, 200], [[30000, 5000], 1, 80, 0, 250, 3]]
obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[45000, 25000], 1000]],
             [1, [[30000, 15000], 2000]], [1, [[35000, 45000], 1500]], [1, [[58000, 35000], 2000]],
             [2, [[30000, 25000], [35000, 27000], [38000, 31000], [33000, 35000], [26000, 30000]]],
             [2, [[18000, 21000], [23000, 22000], [24000, 25000], [19000, 26000]]],
             [2, [[58000, 20000], [61500, 22000], [61000, 25000], [56000, 26000], [52000, 23500], [53500, 21000]]],
             [2, [[42000, 42000], [52000, 41000], [49000, 46000], [45000, 47000]]]]
target = [[[25000, 36000], [1, 2, 3], 40], [[5000, 20000], [1, 2, 3], 60], [[47500, 30000], [1, 2, 3], 40],
          [[2500, 45000], [1, 2, 3], 80], [[20000, 15000], [1, 2, 3], 80], [[58000, 18000], [1, 2, 3], 80],
          [[16000, 49000], [1, 2, 3], 60], [[40000, 18000], [1, 2, 3], 60], [[47000, 52000], [1, 2, 3], 80],
          [[30000, 19500], [1, 2, 3], 60], [[30000, 2000], [1, 2, 3], 40], [[32000, 58000], [1, 2, 3], 90],
          [[61000, 42000], [1, 2, 3], 80], [[70000, 52000], [1, 2, 3], 90], [[68000, 32000], [1, 2, 3], 80],
          [[71000, 19000], [1, 2, 3], 80]]
targets = []
uavs = []
airports = []
Obstacles = []
for i in range(len(airport)):
    c_air = chromosome_generation.Airport(i + 1, airport[i][0], airport[i][1], airport[i][2])
    airports.append(c_air)
for i in range(len(target)):
    c_tar = chromosome_generation.Target(i + 1, target[i][0], target[i][1], target[i][2])
    targets.append(c_tar)
for i in range(len(Uav)):
    c_uav = chromosome_generation.UAV(i + 1, Uav[i][0], Uav[i][1], Uav[i][2], Uav[i][3], Uav[i][4], airports)
    uavs.append(c_uav)
for obstacle in obstacles:
    if obstacle[0] == 1:
        Obs = MAP.Obstacle('o', obstacle[1])
    else:
        Obs = MAP.Obstacle('p', obstacle[1])
    Obstacles.append(Obs)

optimal_value = 1553.091736228783
optimal_chromosome = [[3, 1, 1], [5, 1, 1], [5, 3, 1], [6, 1, 1], [6, 3, 1], [9, 3, 1], [12, 3, 1], [4, 3, 1], [4, 2, 2], [6, 2, 2], [8, 2, 2], [12, 2, 2], [14, 2, 2], [3, 2, 3], [15, 2, 3], [1, 1, 4], [3, 3, 4], [7, 3, 4], [10, 1, 4], [10, 3, 4], [13, 1, 4], [14, 1, 4], [14, 3, 4], [16, 3, 4], [1, 3, 5], [4, 1, 5], [8, 3, 5], [10, 2, 5], [13, 2, 5], [13, 3, 5], [16, 2, 5], [2, 2, 6], [5, 2, 6], [9, 2, 6], [11, 2, 6], [1, 2, 7], [2, 3, 7], [7, 1, 7], [7, 2, 7], [11, 1, 7], [11, 3, 7], [15, 3, 7], [2, 1, 8], [8, 1, 8], [9, 1, 8], [12, 1, 8], [15, 1, 8], [16, 1, 8]]
return_airport = [[1, [42000, 59847], 836.9358844028548, 1], [1, [42000, 73176], 1103.5120054229321, 2], [2, [3000, 49380], 627.5910717854779, 3], [2, [3000, 77568], 1191.3517781708636, 4], [3, [-16316, 50000], 1226.310792920716, 5], [3, [-4759, 50000], 995.1871960283718, 6], [4, [-15470, 50470], 1286.087106666128, 7], [4, [-3906, 38906], 959.0007602318457, 8]]


generate_animation.track_map(optimal_chromosome, uavs, targets, airports, Obstacles, return_airport, optimal_value)