# -*- coding:utf-8 -*-

"""
作者：yuxinyong
日期：2022年10月15日
"""

import generate_animation
import chromosome_generation
import MAP
import math
import task_assignment

# 陆基
airport = [[[42000, 18000], 0, math.pi/2, 1], [[3000, 30000], 0, math.pi/2, 1], [[29000, 48000], 0, math.pi, 1]]

# 海基
# airport = [[[42000, 18000], 16, math.pi/2, 2], [[3000, 30000], 16, math.pi/2, 2], [[29000, 48000], 16, math.pi, 2]]

# 空基一
# airport = [[[42000, 18000], 60, math.pi/2, 3], [[3000, 30000], 60, math.pi/2, 3], [[29000, 48000], 60, math.pi, 3]]
# 空基二
# airport = [[[42000, 18000], 100, math.pi/2, 3], [[3000, 30000], 100, math.pi/2, 3], [[29000, 48000], 100, math.pi, 3]]
# 空基三
# airport = [[[42000, 18000], 160, math.pi/2, 3], [[3000, 30000], 160, math.pi/2, 3], [[29000, 48000], 160, math.pi, 3]]

# 海陆空
# airport = [[[42000, 18000], 16, math.pi/2, 2], [[3000, 30000], 60, math.pi/2, 3], [[29000, 48000], 0, math.pi, 1]]

Uav = [[[42000, 18000], 1, 80, 0, 250], [[42000, 18000], 3, 60, 5, 220], [[3000, 30000], 2, 70, 2, 200],
       [[29000, 48000], 1, 80, 0, 250, 3], [[29000, 48000], 2, 70, 3, 200, 3]]
targets = []
uavs = []
airports = []
# obstacles = []
obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[45000, 25000], 1000]],
             [1, [[30000, 15000], 2000]], [1, [[35000, 45000], 500]],
             [2, [[30000, 25000], [35000, 27000], [38000, 31000], [33000, 35000], [26000, 30000]]],
             [2, [[18000, 21000], [23000, 22000], [24000, 25000], [19000, 26000]]]]
target = [[[25000, 36000], [1, 2, 3], 40], [[5000, 20000], [1, 2, 3], 60], [[47500, 30000], [1, 2, 3], 40],
          [[2500, 45000], [1, 2, 3], 80], [[20000, 15000], [1, 2, 3], 80]]
Obstacles = []
for i in range(len(airport)):
    c_air = chromosome_generation.Airport(i + 1, airport[i][0], airport[i][1], airport[i][2], airport[i][3])
    airports.append(c_air)
for i in range(len(target)):
    c_tar = chromosome_generation.Target(i + 1, target[i][0], target[i][1], target[i][2])
    targets.append(c_tar)
for i in range(len(Uav)):
    c_uav = chromosome_generation.UAV(i + 1, Uav[i][0], Uav[i][1], Uav[i][2], Uav[i][3], Uav[i][4], airports)
    uavs.append(c_uav)
for obstacle in obstacles:
    if obstacle[0] == 1:
        Obs = MAP.Obstacle('o', obstacle[1])
    else:
        Obs = MAP.Obstacle('p', obstacle[1])
    Obstacles.append(Obs)
# optimal_value = 500.60690796564813
# optimal_chromosome = [[1, 1, 1], [5, 1, 1], [5, 3, 1], [3, 1, 1], [3, 3, 1], [4, 2, 2], [3, 2, 2], [1, 2, 3], [1, 3, 3], [4, 3, 3], [4, 1, 4], [2, 3, 4], [5, 2, 5], [2, 1, 5], [2, 2, 5]]
# return_airport = [[1, [42000, 35254], 345.08856253546537, 1], [1, [42000, 42505], 490.09082692797404, 2], [2, [3000, 42792], 255.84004400599508, 3], [3, [12412, 48000], 331.7604324343035, 4], [3, [8904, 48000], 401.9212549470092, 5]]

# 陆基方案一
# optimal_value = 286.73828958708816
# optimal_chromosome = [[3, 1, 1], [3, 3, 1], [1, 1, 1], [1, 3, 1], [3, 2, 2], [1, 2, 2], [5, 1, 3], [5, 2, 3], [5, 3, 3], [2, 1, 3], [2, 2, 3], [2, 3, 3], [4, 1, 4], [4, 3, 4], [4, 2, 5]]
# return_airport = [[1, [42000, 18000], 245.85171903303367, 1], [1, [42000, 18000], 279.37695344662916, 2], [2, [3000, 30000], 243.40497712768368, 3], [3, [29000, 48000], 213.3541656495134, 4], [3, [29000, 48000], 266.6927070618917, 5]]

# 陆基方案二
optimal_value = 286.73828958708816
optimal_chromosome = [[3, 1, 1], [3, 3, 1], [1, 1, 1], [3, 2, 2], [1, 2, 2], [5, 1, 3], [5, 2, 3], [2, 1, 3], [2, 2, 3], [2, 3, 3], [5, 3, 4], [1, 3, 4], [4, 1, 5], [4, 2, 5], [4, 3, 5]]
return_airport = [[1, [42000, 18000], 245.85171903303367, 1], [1, [42000, 18000], 279.37695344662916, 2], [2, [3000, 30000], 243.40497712768368, 3], [3, [29000, 48000], 275.15111112721996, 4], [3, [29000, 48000], 266.6927070618917, 5]]

# 海基方案一
# optimal_value = 332.17530915199825
# optimal_chromosome = [[5, 3, 1], [3, 3, 1], [1, 2, 2], [3, 2, 2], [5, 1, 3], [5, 2, 3], [4, 1, 3], [4, 2, 3], [4, 3, 3], [3, 1, 4], [1, 1, 4], [1, 3, 4], [2, 1, 5], [2, 2, 5], [2, 3, 5]]
# return_airport = [[1, [42000, 32192], 236.53402332575868, 1], [1, [42000, 33136], 252.27171722062204, 2], [2, [3000, 47904], 298.39535837117046, 3], [3, [13753, 48000], 254.12038096316493, 4], [3, [8565, 48000], 340.58440724724755, 5]]

# 海基方案二
# optimal_value = 300.3460682152354
# optimal_chromosome = [[1, 3, 1], [3, 3, 1], [3, 2, 2], [2, 1, 3], [5, 1, 3], [5, 2, 3], [5, 3, 3], [2, 2, 3], [2, 3, 3], [3, 1, 4], [1, 1, 5], [1, 2, 5], [4, 1, 5], [4, 2, 5], [4, 3, 5]]
# return_airport = [[1, [42000, 21851], 240.67142419166396, 1], [1, [42000, 19864], 116.50622568862258, 2], [2, [3000, 34425], 276.57755088981173, 3], [3, [25619, 48000], 211.32882649184012, 4], [3, [24149, 48000], 303.16343781253204, 5]]

# 空基一方案一
# optimal_value = 275.13464953721274
# optimal_chromosome = [[5, 1, 1], [5, 3, 1], [3, 1, 1], [3, 3, 1], [5, 2, 2], [3, 2, 2], [2, 1, 3], [2, 2, 3], [2, 3, 3], [4, 1, 3], [4, 3, 3], [1, 1, 4], [1, 3, 4], [1, 2, 5], [4, 2, 5]]
# return_airport = [[1, [42000, 32192], 236.53402332575868, 1], [1, [42000, 34269], 271.1582525581654, 2], [2, [3000, 41926], 198.77103645140343, 3], [3, [23075, 48000], 98.75114452541531, 4], [3, [13216, 48000], 263.07305298824, 5]]

# 空基一方案二
# optimal_value = 275.13464953721274
# optimal_chromosome = [[5, 1, 1], [5, 3, 1], [3, 1, 1], [3, 3, 1], [5, 2, 2], [3, 2, 2], [2, 1, 3], [2, 2, 3], [2, 3, 3], [1, 1, 4], [4, 1, 4], [4, 3, 4], [1, 2, 5], [1, 3, 5], [4, 2, 5]]
# return_airport = [[1, [42000, 32192], 236.53402332575868, 1], [1, [42000, 34269], 271.1582525581654, 2], [2, [3000, 37023], 117.04854702331475, 3], [3, [15850, 48000], 219.17019386619927, 4], [3, [13216, 48000], 263.07305298824, 5]]

# 海陆空方案一
# optimal_value = 285.368349137205
# optimal_chromosome = [[5, 1, 1], [5, 3, 1], [3, 1, 1], [3, 3, 1], [5, 2, 2], [3, 2, 2], [2, 1, 3], [2, 2, 3], [2, 3, 3], [4, 1, 3], [4, 2, 3], [4, 3, 3], [1, 1, 5], [1, 2, 5], [1, 3, 5]]
# return_airport = [[1, [42000, 22080], 255.00706150193605, 1], [1, [42000, 22608], 288.0070707984925, 2], [2, [3000, 41926], 198.77103645140343, 3], [], [3, [29000, 48000], 126.49110640673518, 5]]

# 海陆空方案二
# optimal_value = 329.8379757489618
# optimal_chromosome = [[3, 1, 1], [3, 3, 1], [5, 2, 2], [3, 2, 2], [2, 1, 3], [2, 2, 3], [2, 3, 3], [4, 3, 3], [1, 1, 4], [5, 1, 4], [5, 3, 4], [1, 2, 5], [1, 3, 5], [4, 1, 5], [4, 2, 5]]
# return_airport = [[1, [42000, 19647], 102.94155295224127, 1], [1, [42000, 22608], 288.0070707984925, 2], [2, [3000, 41926], 198.77103645140343, 3], [3, [29000, 48000], 274.7111407074688, 4], [3, [29000, 48000], 317.8157102968163, 5]]

# optimal_value = 311.5043600446661
# optimal_chromosome = [[5, 1, 1], [5, 3, 1], [3, 3, 1], [5, 2, 2], [2, 1, 3], [2, 2, 3], [2, 3, 3], [4, 1, 3], [4, 2, 3], [1, 1, 4], [1, 3, 4], [4, 3, 4], [1, 2, 5], [3, 1, 5], [3, 2, 5]]
# return_airport = [[1, [42000, 22080], 255.00706150193605, 1], [1, [42000, 21252], 203.2806289140036, 2], [2, [3000, 41926], 198.77103645140343, 3], [3, [29000, 48000], 254.25256823745303, 4], [3, [29000, 48000], 309.3052451871532, 5]]


# generate_animation.track_map(optimal_chromosome, uavs, targets, airports, Obstacles, return_airport, optimal_value)
task_assignment.track_map(optimal_chromosome, uavs, targets, airports, Obstacles, return_airport)
