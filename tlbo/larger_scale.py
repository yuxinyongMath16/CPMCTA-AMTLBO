# -*- coding:utf-8 -*-

"""
作者：yuxinyong
日期：2023年08月26日
"""
import tlbo
import population_generation
import MAP
import math

# airport = [[[42000, 18000], 50, math.pi/2], [[3000, 30000], 50, math.pi/2], [[29000, 48000], 50, math.pi],
#            [[30000, 0], 50, 3*math.pi/4], [[55000, 10000], 50, math.pi/4]]
# Uav = [[[43000, 18000], 1, 80, 0, 250], [[43000, 18000], 3, 60, 5, 220], [[3000, 30000], 2, 70, 2, 200],
#        [[3000, 30000], 1, 80, 0, 250], [[29000, 48000], 2, 90, 3, 200], [[29000, 48000], 3, 80, 4, 220],
#        [[30000, 0], 3, 70, 5, 210], [[30000, 0], 1, 80, 0, 240], [[55000, 10000], 2, 90, 3, 220],
#        [[55000, 10000], 2, 70, 2, 200]]
# obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[45000, 25000], 1000]],
#              [1, [[30000, 15000], 2000]], [1, [[35000, 45000], 1500]], [1, [[58000, 35000], 2000]],
#              [2, [[30000, 25000], [35000, 27000], [38000, 31000], [33000, 35000], [26000, 30000]]],
#              [2, [[18000, 21000], [23000, 22000], [24000, 25000], [19000, 26000]]],
#              [2, [[58000, 20000], [61500, 22000], [61000, 25000], [56000, 26000], [52000, 23500], [53500, 21000]]],
#              [2, [[42000, 42000], [52000, 41000], [49000, 46000], [45000, 47000]]]]
# target = [[[25000, 36000], [1, 2, 3], 40], [[5000, 20000], [1, 2, 3], 60], [[47500, 30000], [1, 2, 3], 40],
#            [[2500, 41000], [1, 2, 3], 80], [[20000, 15000], [1, 2, 3], 80], [[58000, 18000], [1, 2, 3], 80],
#            [[16000, 49000], [1, 2, 3], 60], [[5000, 5000], [1, 2, 3], 100], [[40000, 18000], [1, 2, 3], 60],
#            [[47000, 52000], [1, 2, 3], 80], [[30000, 19500], [1, 2, 3], 60], [[30000, 2000], [1, 2, 3], 40],
#            [[32000, 58000], [1, 2, 3], 90], [[61000, 42000], [1, 2, 3], 80], [[70000, 52000], [1, 2, 3], 90],
#            [[68000, 32000], [1, 2, 3], 80], [[71000, 19000], [1, 2, 3], 80], [[70000, 10000], [1, 2, 3], 60],
#            [[35000, 37000], [1, 2, 3], 60], [[0, 30000], [1, 2, 3], 90]]
"""
比赛第一次使用算例信息
"""
# airport = [[[42000, 18000], 16, math.pi/2], [[3000, 18000], 60, math.pi/2], [[45000, 50000], 0, math.pi],
#            [[30000, 5000], 50, 3*math.pi/4]]
# airport = [[[42000, 18000], 16, math.pi/2], [[64000, 18000], 60, math.pi/2], [[50000, 3000], 0, math.pi],
#            [[30000, 5000], 50, 3*math.pi/4]]
# Uav = [[[42000, 18000], 1, 80, 0, 250], [[42000, 18000], 3, 60, 5, 220], [[3000, 18000], 3, 70, 5, 210],
#        [[3000, 18000], 1, 80, 0, 240], [[45000, 50000], 2, 70, 3, 200], [[45000, 50000], 3, 80, 4, 220],
#        [[30000, 5000], 2, 70, 2, 200], [[30000, 5000], 1, 80, 0, 250]]
# obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[45000, 25000], 1000]],
#              [1, [[30000, 15000], 2000]], [1, [[35000, 45000], 1500]], [1, [[58000, 35000], 2000]],
#              [2, [[30000, 25000], [35000, 27000], [38000, 31000], [33000, 35000], [26000, 30000]]],
#              [2, [[18000, 21000], [23000, 22000], [24000, 25000], [19000, 26000]]],
#              [2, [[58000, 20000], [61500, 22000], [61000, 25000], [56000, 26000], [52000, 23500], [53500, 21000]]],
#              [2, [[42000, 42000], [52000, 41000], [49000, 46000], [45000, 47000]]]]
# target = [[[25000, 36000], [1, 2, 3], 40], [[5000, 20000], [1, 2, 3], 60], [[47500, 30000], [1, 2, 3], 40],
#           [[2500, 45000], [1, 2, 3], 80], [[20000, 15000], [1, 2, 3], 80], [[58000, 18000], [1, 2, 3], 80],
#           [[16000, 49000], [1, 2, 3], 60], [[40000, 18000], [1, 2, 3], 60], [[47000, 52000], [1, 2, 3], 80],
#           [[30000, 19500], [1, 2, 3], 60], [[30000, 2000], [1, 2, 3], 40], [[32000, 58000], [1, 2, 3], 90],
#           [[61000, 42000], [1, 2, 3], 80], [[70000, 52000], [1, 2, 3], 90], [[68000, 32000], [1, 2, 3], 80],
#           [[71000, 19000], [1, 2, 3], 80 ]]
'''
比赛第二次使用算例信息
'''
airport = [[[42000, -2000], 16, math.pi], [[38000, 30000], 60, 3*math.pi/4], [[54000, 15000], 16, math.pi/2],
           [[-16000, 10000], 50, math.pi/2]]
Uav = [[[42000, -2000], 1, 80, 0, 250], [[42000, -2000], 3, 60, 5, 220], [[38000, 30000], 3, 70, 5, 210],
       [[38000, 30000], 1, 80, 0, 240], [[54000, 15000], 2, 70, 3, 200, 3], [[54000, 15000], 3, 80, 4, 220],
       [[-16000, 10000], 2, 70, 2, 200], [[-16000, 10000], 1, 80, 0, 250, 3]]

obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[0, 53000], 3000]],
                 [2, [[30000, 42000], [35000, 44000], [38000, 48000], [33000, 52000], [26000, 47000]]],
                 [2, [[-8000, 11000], [-3000, 12000], [-2000, 15000], [-7000, 16000]]],
                 [2, [[-2000, 28000], [1500, 30000], [1000, 33000], [-4000, 34000], [-8000, 31500], [-6500, 29000]]]]
target = [[[25000, 36000], [1, 2, 3], 40, 2], [[5000, 20000], [1, 2, 3], 60, 2], [[47500, 30000], [1, 2, 3], 40, 1],
           [[-2000, 41000], [1, 2, 3], 80, 2], [[20000, 15000], [1, 2, 3], 80, 1], [[5000, 66000], [1, 2, 3], 80, 2],
           [[16000, 49000], [1, 2, 3], 60, 2], [[15000, 5000], [1, 2, 3], 100, 1], [[40000, 18000], [1, 2, 3], 60, 1],
           [[47000, 52000], [1, 2, 3], 80, 2], [[30000, 19500], [1, 2, 3], 60, 1], [[30000, 2000], [1, 2, 3], 40, 1],
           [[32000, 58000], [1, 2, 3], 90, 2], [[-15000, 25000], [1, 2, 3], 80, 2],
           [[35000, 37000], [1, 2, 3], 60, 2], [[15000, 23000], [1, 2, 3], 70, 2]]
targets = []
uavs = []
airports = []
Obstacles = []
for i in range(len(airport)):
    c_air = population_generation.Airport(i + 1, airport[i][0], airport[i][1], airport[i][2])
    airports.append(c_air)
for i in range(len(target)):
    c_tar = population_generation.Target(i + 1, target[i][0], target[i][1], target[i][2])
    targets.append(c_tar)
for i in range(len(Uav)):
    c_uav = population_generation.UAV(i + 1, Uav[i][0], Uav[i][1], Uav[i][2], Uav[i][3], Uav[i][4], airports)
    uavs.append(c_uav)
for obstacle in obstacles:
    if obstacle[0] == 1:
        Obs = MAP.Obstacle('o', obstacle[1])
    else:
        Obs = MAP.Obstacle('p', obstacle[1])
    Obstacles.append(Obs)
population_size = 100
Ne = 4
Ncr = 32
Nm = 32
max_iter = 100
threat_r = 2500
optimal_chromosome, return_airport, _ = tlbo.main(max_iter, population_size, uavs, targets, Obstacles, threat_r)
# task_assignment.track_map(optimal_chromosome, uavs, targets, airports, Obstacles, return_airport)