import fitness_calculation
import population_generation
import MAP
import math


# 3556算例数据
# airport = [[[10000, 60000], 0, 0], [[20000, 17000], 16, math.pi / 4], [[-16000, 10000], 50, math.pi / 2]]
# Uav = [[[10000, 60000], 1, 80, 0, 250], [[10000, 60000], 2, 70, 3, 200, 3], [[20000, 17000], 3, 80, 4, 220],
#        [[20000, 17000], 2, 70, 2, 200], [[-16000, 10000], 1, 80, 0, 250, 3]]
# obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[0, 53000], 3000]],
#              [2, [[30000, 42000], [35000, 44000], [38000, 48000], [33000, 52000], [26000, 47000]]],
#              [2, [[-8000, 11000], [-3000, 12000], [-2000, 15000], [-7000, 16000]]],
#              [2, [[-2000, 28000], [1500, 30000], [1000, 33000], [-4000, 34000], [-8000, 31500], [-6500, 29000]]]]
# target = [[[5000, 20000], [1, 2, 3], 60, 2], [[15000, 23000], [1, 2, 3], 70, 2], [[25000, 36000], [1, 2, 3], 40, 2],
#           [[16000, 49000], [1, 2, 3], 60, 2], [[-2000, 41000], [1, 2, 3], 80, 2]]
# 3676算例数据
# airport = [[[10000, 60000], 0, 0], [[20000, 17000], 16, math.pi / 4], [[-16000, 10000], 50, math.pi / 2]]
# Uav = [[[10000, 60000], 1, 80, 0, 250], [[10000, 60000], 2, 70, 3, 200, 3], [[20000, 17000], 3, 80, 4, 220],
#        [[20000, 17000], 2, 70, 2, 200], [[-16000, 10000], 1, 80, 0, 250, 3], [[-16000, 10000], 3, 60, 5, 220]]
#
# obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[0, 53000], 3000]],
#              [2, [[30000, 42000], [35000, 44000], [38000, 48000], [33000, 52000], [26000, 47000]]],
#              [2, [[-8000, 11000], [-3000, 12000], [-2000, 15000], [-7000, 16000]]],
#              [2, [[-2000, 28000], [1500, 30000], [1000, 33000], [-4000, 34000], [-8000, 31500], [-6500, 29000]]]]
# target = [[[5000, 20000], [1, 2, 3], 60, 2], [[15000, 23000], [1, 2, 3], 70, 2], [[25000, 36000], [1, 2, 3], 40, 2],
#           [[16000, 49000], [1, 2, 3], 60, 2], [[-2000, 41000], [1, 2, 3], 80, 2], [[32000, 58000], [1, 2, 3], 90, 2],
#           [[-15000, 25000], [1, 2, 3], 80, 2]]
# 47126算例数据
# airport = [[[42000, -2000], 16, math.pi], [[38000, 30000], 60, 3 * math.pi / 4], [[54000, 15000], 16, math.pi / 2],
#            [[-16000, 10000], 50, math.pi / 2]]
# Uav = [[[42000, -2000], 1, 80, 0, 250], [[42000, -2000], 3, 60, 5, 220], [[38000, 30000], 3, 70, 5, 210],
#        [[38000, 30000], 1, 80, 0, 240], [[54000, 15000], 2, 70, 3, 200, 3], [[54000, 15000], 3, 80, 4, 220],
#        [[-16000, 10000], 2, 70, 2, 200]]
#
# obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[0, 53000], 3000]],
#              [2, [[30000, 42000], [35000, 44000], [38000, 48000], [33000, 52000], [26000, 47000]]],
#              [2, [[-8000, 11000], [-3000, 12000], [-2000, 15000], [-7000, 16000]]],
#              [2, [[-2000, 28000], [1500, 30000], [1000, 33000], [-4000, 34000], [-8000, 31500], [-6500, 29000]]]]
# target = [[[25000, 36000], [1, 2, 3], 40, 2], [[5000, 20000], [1, 2, 3], 60, 2], [[47500, 30000], [1, 2, 3], 40, 1],
#           [[-2000, 41000], [1, 2, 3], 80, 2], [[16000, 49000], [1, 2, 3], 60, 2],
#           [[15000, 5000], [1, 2, 3], 100, 1], [[40000, 18000], [1, 2, 3], 60, 1],
#           [[47000, 52000], [1, 2, 3], 80, 2], [[30000, 19500], [1, 2, 3], 60, 1], [[30000, 2000], [1, 2, 3], 40, 1],
#           [[32000, 58000], [1, 2, 3], 90, 2], [[15000, 23000], [1, 2, 3], 70, 2]]
# 48166算例数据
airport = [[[42000, -2000], 16, math.pi], [[38000, 30000], 60, 3 * math.pi / 4], [[54000, 15000], 16, math.pi / 2],
           [[-16000, 10000], 50, math.pi / 2]]
Uav = [[[42000, -2000], 1, 80, 0, 250], [[42000, -2000], 3, 60, 5, 220], [[38000, 30000], 3, 70, 5, 210],
       [[38000, 30000], 1, 80, 0, 240], [[54000, 15000], 2, 70, 3, 200, 3], [[54000, 15000], 3, 80, 4, 220],
       [[-16000, 10000], 2, 70, 2, 200], [[-16000, 10000], 1, 80, 0, 250, 3]]

obstacles = [[1, [[10000, 15000], 2000]], [1, [[15000, 35000], 5000]], [1, [[0, 53000], 3000]],
             [2, [[30000, 42000], [35000, 44000], [38000, 48000], [33000, 52000], [26000, 47000]]],
             [2, [[-8000, 11000], [-3000, 12000], [-2000, 15000], [-7000, 16000]]],
             [2, [[-2000, 28000], [1500, 30000], [1000, 33000], [-4000, 34000], [-8000, 31500], [-6500, 29000]]]]
target = [[[25000, 36000], [1, 2, 3], 40, 2], [[5000, 20000], [1, 2, 3], 60, 2], [[47500, 30000], [1, 2, 3], 40, 1],
          [[-2000, 41000], [1, 2, 3], 80, 2], [[20000, 15000], [1, 2, 3], 80, 1], [[5000, 66000], [1, 2, 3], 80, 2],
          [[16000, 49000], [1, 2, 3], 60, 2], [[15000, 5000], [1, 2, 3], 100, 1],
          [[40000, 18000], [1, 2, 3], 60, 1],
          [[47000, 52000], [1, 2, 3], 80, 2], [[30000, 19500], [1, 2, 3], 60, 1], [[30000, 2000], [1, 2, 3], 40, 1],
          [[32000, 58000], [1, 2, 3], 90, 2], [[-15000, 25000], [1, 2, 3], 80, 2],
          [[35000, 37000], [1, 2, 3], 60, 2], [[15000, 23000], [1, 2, 3], 70, 2]]
targets = []
uavs = []
airports = []
Obstacles = []
for i in range(len(airport)):
    c_air = population_generation.Airport(i + 1, airport[i][0], airport[i][1], airport[i][2])
    airports.append(c_air)
for i in range(len(target)):
    c_tar = population_generation.Target(i + 1, target[i][0], target[i][1], target[i][2])
    targets.append(c_tar)
for i in range(len(Uav)):
    c_uav = population_generation.UAV(i + 1, Uav[i][0], Uav[i][1], Uav[i][2], Uav[i][3], Uav[i][4], airports)
    uavs.append(c_uav)
for obstacle in obstacles:
    if obstacle[0] == 1:
        Obs = MAP.Obstacle('o', obstacle[1])
    else:
        Obs = MAP.Obstacle('p', obstacle[1])
    Obstacles.append(Obs)
threat_r = 2500
# 大规模例子
solutions = [[[5, 1, 1], [16, 1, 1], [13, 3, 1], [14, 3, 1], [13, 1, 1], [3, 1, 1], [7, 1, 1], [11, 1, 1], [14, 1, 1], [2, 3, 1], [11, 3, 1], [11, 2, 2], [1, 2, 2], [13, 2, 2], [10, 2, 2], [7, 2, 3], [16, 2, 3], [3, 2, 3], [14, 2, 3], [5, 2, 3], [12, 1, 4], [8, 1, 4], [15, 1, 4], [10, 3, 4], [12, 3, 4], [10, 1, 4], [6, 3, 4], [1, 1, 5], [9, 2, 5], [6, 1, 5], [15, 2, 5], [5, 3, 5], [16, 3, 5], [1, 3, 5], [12, 2, 6], [6, 2, 6], [8, 2, 6], [4, 2, 7], [2, 2, 7], [8, 3, 7], [7, 3, 7], [4, 3, 7], [4, 1, 8], [2, 1, 8], [15, 3, 8], [9, 3, 8], [3, 3, 8], [9, 1, 8]]]
pop_fitness, time_sum, return_airports, pop_f1, pop_f2 = fitness_calculation.fitness(solutions, targets, uavs, Obstacles, threat_r)
print('最优适应度值', pop_fitness)
print('返回机场', return_airports)
print('指标1', pop_f1)
print('指标2', pop_f2)
